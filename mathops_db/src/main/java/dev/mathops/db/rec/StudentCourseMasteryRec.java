package dev.mathops.db.rec;

import dev.mathops.core.EqualityTests;
import dev.mathops.core.builder.HtmlBuilder;

import java.util.Objects;

/**
 * A "student course mastery" record.
 */
public final class StudentCourseMasteryRec extends RecBase
        implements Comparable<StudentCourseMasteryRec> {

    /** A field name for serialization of records. */
    private static final String FLD_STU_ID = "stu_id";

    /** A field name for serialization of records. */
    private static final String FLD_COURSE_ID = "course_id";

    /** A field name for serialization of records. */
    private static final String FLD_SCORE = "score";

    /** A field name for serialization of records. */
    private static final String FLD_NBR_MASTERED_H1 = "nbr_mastered_h1";

    /** A field name for serialization of records. */
    private static final String FLD_NBR_MASTERED_H2 = "nbr_mastered_h2";

    /** A field name for serialization of records. */
    private static final String FLD_NBR_ELIGIBLE = "nbr_eligible";

    /** A field name for serialization of records. */
    private static final String FLD_EXPLOR_1_STATUS = "explor_1_status";

    /** A field name for serialization of records. */
    private static final String FLD_EXPLOR_2_STATUS = "explor_2_status";

    /** The 'stu_id' field value. */
    public String stuId;

    /** The 'course_id' field value. */
    public String courseId;

    /** The 'score' field value. */
    public Integer score;

    /** The 'nbr_mastered_h1' field value. */
    public Integer nbrMasteredH1;

    /** The 'nbr_mastered_h2' field value. */
    public Integer nbrMasteredH2;

    /** The 'nbr_eligible' field value. */
    public Integer nbrEligible;

    /** The 'explor_1_status' field value. */
    public String explor1Status;

    /** The 'explor_2_status' field value. */
    public String explor2Status;

    /**
     * Constructs a new {@code StudentCourseMasteryRec}.
     */
    public StudentCourseMasteryRec() {

        super();
    }

    /**
     * Constructs a new {@code StudentCourseMasteryRec} by parsing the string format generated by
     * {@code serializedString}.
     *
     * @param toParse the string to parse
     * @return the parsed object
     * @throws IllegalArgumentException if the string cannot be parsed
     */
    public static StudentCourseMasteryRec parse(final String toParse) {

        final StudentCourseMasteryRec result = new StudentCourseMasteryRec();

        result.parseString(toParse);

        return result;
    }

    /**
     * Sets a field based on its name and the string representation of its value.
     *
     * <p>
     * If the field name is not recognized, no action is taken (perhaps the object is being deserialized from an old
     * record created at a time when a field was present that has since been removed).
     *
     * <p>
     * An {@code IllegalArgumentException} is thrown If a field name is recognized but the value provided cannot be
     * interpreted or if the field name or value string is {@code null}.
     *
     * @param name  the field name
     * @param value the value
     * @throws IllegalArgumentException if the string cannot be parsed
     */
    @Override
    protected void setField(final String name, final String value) throws IllegalArgumentException {

        if (FLD_STU_ID.equals(name)) {
            this.stuId = value;
        } else if (FLD_COURSE_ID.equals(name)) {
            this.courseId = value;
        } else if (FLD_SCORE.equals(name)) {
            this.score = Integer.valueOf(value);
        } else if (FLD_NBR_MASTERED_H1.equals(name)) {
            this.nbrMasteredH1 = Integer.valueOf(value);
        } else if (FLD_NBR_MASTERED_H2.equals(name)) {
            this.nbrMasteredH2 = Integer.valueOf(value);
        } else if (FLD_NBR_ELIGIBLE.equals(name)) {
            this.nbrEligible = Integer.valueOf(value);
        } else if (FLD_EXPLOR_1_STATUS.equals(name)) {
            this.explor1Status = value;
        } else if (FLD_EXPLOR_2_STATUS.equals(name)) {
            this.explor2Status = value;
        }
    }

    /**
     * Constructs a new {@code StudentCourseMasteryRec}.
     *
     * @param theStuId         the student ID
     * @param theCourseId      the course ID
     * @param theScore         the total score
     * @param theNbrMasteredH1 the number of standards mastered in half 1 of course
     * @param theNbrMasteredH2 the number of standards mastered in half 2 of course
     * @param theNbrEligible   the number of standards eligible but not yet mastered
     * @param theExplor1Status the status in exploration 1
     * @param theExplor2Status the status in exploration 2
     */
    public StudentCourseMasteryRec(final String theStuId, final String theCourseId,
                                   final Integer theScore, final Integer theNbrMasteredH1,
                                   final Integer theNbrMasteredH2,
                                   final Integer theNbrEligible, final String theExplor1Status,
                                   final String theExplor2Status) {

        super();

        this.stuId = theStuId;
        this.courseId = theCourseId;
        this.score = theScore;
        this.nbrMasteredH1 = theNbrMasteredH1;
        this.nbrMasteredH2 = theNbrMasteredH2;
        this.nbrEligible = theNbrEligible;
        this.explor1Status = theExplor1Status;
        this.explor2Status = theExplor2Status;
    }

    /**
     * Compares two records for order.
     *
     * @param o the object to be compared
     * @return a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than
     *         the specified object
     */
    @Override
    public int compareTo(final StudentCourseMasteryRec o) {

        int result = compareAllowingNull(this.stuId, o.stuId);

        if (result == 0) {
            result = compareAllowingNull(this.courseId, o.courseId);
        }

        return result;
    }

    /**
     * Generates a string serialization of the record. Each concrete subclass should have a constructor that accepts a
     * single {@code String} to reconstruct the object from this string.
     *
     * @return the string
     */
    @Override
    public String serializedString() {

        final HtmlBuilder htm = new HtmlBuilder(40);

        appendField(htm, FLD_STU_ID, this.stuId);
        htm.add(DIVIDER);
        appendField(htm, FLD_COURSE_ID, this.courseId);
        htm.add(DIVIDER);
        appendField(htm, FLD_SCORE, this.score);
        htm.add(DIVIDER);
        appendField(htm, FLD_NBR_MASTERED_H1, this.nbrMasteredH1);
        htm.add(DIVIDER);
        appendField(htm, FLD_NBR_MASTERED_H2, this.nbrMasteredH2);
        htm.add(DIVIDER);
        appendField(htm, FLD_NBR_ELIGIBLE, this.nbrEligible);
        htm.add(DIVIDER);
        appendField(htm, FLD_EXPLOR_1_STATUS, this.explor1Status);
        htm.add(DIVIDER);
        appendField(htm, FLD_EXPLOR_2_STATUS, this.explor2Status);

        return htm.toString();
    }

    /**
     * Generates a hash code for the object.
     *
     * @return the hash code
     */
    @Override
    public int hashCode() {

        return EqualityTests.objectHashCode(this.stuId) //
                + EqualityTests.objectHashCode(this.courseId) //
                + EqualityTests.objectHashCode(this.score) //
                + EqualityTests.objectHashCode(this.nbrMasteredH1) //
                + EqualityTests.objectHashCode(this.nbrMasteredH2) //
                + EqualityTests.objectHashCode(this.nbrEligible) //
                + EqualityTests.objectHashCode(this.explor1Status) //
                + EqualityTests.objectHashCode(this.explor2Status);
    }

    /**
     * Tests whether this object is equal to another.
     *
     * @param obj the other object
     * @return true if equal; false if not
     */
    @Override
    public boolean equals(final Object obj) {

        final boolean equal;

        if (obj == this) {
            equal = true;
        } else if (obj instanceof final StudentCourseMasteryRec rec) {
            equal = Objects.equals(this.stuId, rec.stuId)
                    && Objects.equals(this.courseId, rec.courseId)
                    && Objects.equals(this.score, rec.score)
                    && Objects.equals(this.nbrMasteredH1, rec.nbrMasteredH1)
                    && Objects.equals(this.nbrMasteredH2, rec.nbrMasteredH2)
                    && Objects.equals(this.nbrEligible, rec.nbrEligible)
                    && Objects.equals(this.explor1Status, rec.explor1Status)
                    && Objects.equals(this.explor2Status, rec.explor2Status);
        } else {
            equal = false;
        }

        return equal;
    }
}
