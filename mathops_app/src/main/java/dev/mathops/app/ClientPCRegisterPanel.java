package dev.mathops.app;

import dev.mathops.core.log.Log;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Container;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.Serial;

/**
 * A panel to collect the required information to register a new client PC.
 */
final class ClientPCRegisterPanel extends JPanel implements ActionListener {

    /** Version number for serialization. */
    @Serial
    private static final long serialVersionUID = 6742442471589369086L;

    /** The combo box used to choose a testing center. */
    private final JComboBox<String> testingCenter;

    /** The text field used to enter a description. */
    private final  JTextField description;

    /** The text field used to enter a station number. */
    private final JTextField stationNumber;

    /** The name of the clicked button, null if no click. */
    private String action;

    /**
     * Constructs a new {@code ClientPCRegisterPanel}.
     */
    ClientPCRegisterPanel() {

        super();

        final String[] centers = {"Precalculus Center", "Development Center"};

        if (!SwingUtilities.isEventDispatchThread()) {
            Log.warning(Res.get(Res.NOT_AWT_THREAD));
        }

        setLayout(new BorderLayout());
        setBorder(BorderFactory.createEmptyBorder(6, 6, 6, 6));

        final JPanel inner = new JPanel(new GridLayout(3, 2, 8, 5));

        JLabel lbl = new JLabel("Machine Location:");
        lbl.setHorizontalAlignment(SwingConstants.RIGHT);
        inner.add(lbl);
        this.testingCenter = new JComboBox<>(centers);
        inner.add(this.testingCenter);

        lbl = new JLabel("Station Number:");
        lbl.setHorizontalAlignment(SwingConstants.RIGHT);
        inner.add(lbl);
        this.stationNumber = new JTextField(8);
        inner.add(this.stationNumber);

        lbl = new JLabel("Description:");
        lbl.setHorizontalAlignment(SwingConstants.RIGHT);
        inner.add(lbl);
        this.description = new JTextField(20);
        inner.add(this.description);

        add(inner, BorderLayout.PAGE_START);

        final JPanel inner2 = new JPanel(new FlowLayout(FlowLayout.CENTER));
        JButton btn = new JButton("Ok");
        btn.addActionListener(this);
        inner2.add(btn);
        btn = new JButton("Cancel");
        btn.addActionListener(this);
        inner2.add(btn);

        add(inner2, BorderLayout.PAGE_END);
    }

    /**
     * Waits for the user to press a button.
     */
    void waitForButton() {

        while (isVisible() && this.action == null) {

            // Catch the fact that any parent has gone invisible.
            Container parent = getParent();

            while (parent != null) {

                if (!parent.isVisible()) {
                    setVisible(false);
                }

                parent = parent.getParent();
            }

            try {
                Thread.sleep(100L);
            } catch (final InterruptedException ex) {
                Thread.currentThread().interrupt();
            }
        }
    }

    /**
     * Gets the name of the pressed button.
     *
     * @return the name of the button pressed
     */
    public String getAction() {

        return this.action;
    }

    /**
     * Gets the selected testing center name.
     *
     * @return the selected testing center
     */
    String getTestingCenter() {

        return (String) this.testingCenter.getSelectedItem();
    }

    /**
     * Gets the description entered by the user.
     *
     * @return the description
     */
    public String getDescription() {

        return this.description.getText();
    }

    /**
     * Gets the station number entered by the user.
     *
     * @return the station number
     */
    String getStationNumber() {

        return this.stationNumber.getText();
    }

    /**
     * Handler for action events generated by buttons.
     *
     * @param e the action event
     */
    @Override
    public void actionPerformed(final ActionEvent e) {

        final String cmd = e.getActionCommand();

        if ("Cancel".equals(cmd)) {
            this.action = cmd;
            getParent().setVisible(false);
        }

        if (this.description.getText() == null || this.description.getText().isEmpty()) {
            this.description.setBackground(new Color(255, 200, 200));

            if (this.stationNumber.getText() == null || this.stationNumber.getText().isEmpty()) {
                this.stationNumber.setBackground(new Color(255, 200, 200));
            } else {
                this.stationNumber.setBackground(Color.WHITE);
            }
        } else {
            this.description.setBackground(Color.WHITE);

            if (this.stationNumber.getText() == null || this.stationNumber.getText().isEmpty()) {
                this.stationNumber.setBackground(new Color(255, 200, 200));
            } else {
                this.stationNumber.setBackground(Color.WHITE);
                this.action = cmd;
                getParent().setVisible(false);
            }
        }
    }
}
