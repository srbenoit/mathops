package jwabbit.gui;

/*
 * This software was derived from the Wabbitemu software, as it existed in October 2015, by Steve Benoit. This software
 * is licensed under the GNU General Public License version 2 (GPLv2). See the disclaimers or warranty and liability
 * included in the terms of that license.
 */

import javax.swing.ButtonGroup;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JSeparator;
import javax.swing.KeyStroke;
import java.awt.event.ActionListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.io.Serial;
import java.util.EnumMap;
import java.util.Map;

/**
 * The menu bar for the CalcUI main frame.
 */
final class CalcMenuBar extends JMenuBar {

    /** Version number for serialization. */
    @Serial
    private static final long serialVersionUID = -2869808715428133973L;

    /** Map from action to item, so we can find items to enable/disable. */
    private final Map<EAction, JMenuItem> items;

    /**
     * Constructs a new {@code CalcMenuBar}.
     *
     * @param handler the handler that should receive actions generated by menu items
     */
    CalcMenuBar(final ActionListener handler) {

        super();

        this.items = new EnumMap<>(EAction.class);

        add(makeFileMenu(handler));
        add(makeViewMenu(handler));
        add(makeCalcMenu(handler));
        add(makeDebugMenu(handler));
        add(makeHelpMenu(handler));
    }

    /**
     * Constructs the file menu.
     *
     * @param handler the handler that should receive actions generated by menu items
     * @return the file menu
     */
    private JMenu makeFileMenu(final ActionListener handler) {

        final JMenu fileMenu = new JMenu("File");
        fileMenu.setMnemonic('F');

        final JMenuItem fileNew = new JMenuItem("New");
        fileNew.setMnemonic('N');
        fileNew.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N, InputEvent.CTRL_DOWN_MASK));
        fileNew.addActionListener(handler);
        fileNew.setActionCommand(EAction.newCalc.getCmd());
        this.items.put(EAction.newCalc, fileNew);
        fileMenu.add(fileNew);

        final JMenuItem fileOpen = new JMenuItem("Open...");
        fileOpen.setMnemonic('O');
        fileOpen.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F10, 0));
        fileOpen.addActionListener(handler);
        fileOpen.setActionCommand(EAction.open.getCmd());
        this.items.put(EAction.open, fileOpen);
        fileMenu.add(fileOpen);

        final JMenuItem fileSave = new JMenuItem("Save...");
        fileSave.setMnemonic('S');
        fileSave.addActionListener(handler);
        fileSave.setActionCommand(EAction.save.getCmd());
        this.items.put(EAction.save, fileSave);
        fileMenu.add(fileSave);

        fileMenu.add(new JSeparator());

        final JMenuItem fileRecordGif = new JMenuItem("Record GIF...");
        fileRecordGif.setMnemonic('R');
        fileRecordGif.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_BACK_SPACE, 0));
        fileRecordGif.addActionListener(handler);
        fileRecordGif.setActionCommand(EAction.recordGif.getCmd());
        this.items.put(EAction.recordGif, fileRecordGif);
        fileMenu.add(fileRecordGif);

        final JMenuItem fileScreenshot = new JMenuItem("Take screenshot...");
        fileScreenshot.setMnemonic('T');
        fileScreenshot.addActionListener(handler);
        fileScreenshot.setActionCommand(EAction.screenshot.getCmd());
        this.items.put(EAction.screenshot, fileScreenshot);
        fileMenu.add(fileScreenshot);

        final JMenuItem fileRecordAvi = new JMenuItem("Record AVI...");
        fileRecordAvi.setMnemonic('A');
        fileRecordAvi.addActionListener(handler);
        fileRecordAvi.setActionCommand(EAction.startRecord.getCmd());
        this.items.put(EAction.startRecord, fileRecordAvi);
        fileMenu.add(fileRecordAvi);

        fileMenu.add(new JSeparator());

        final JMenuItem fileClose = new JMenuItem("Close");
        fileClose.setMnemonic('C');
        fileClose.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_W, InputEvent.CTRL_DOWN_MASK));
        fileClose.addActionListener(handler);
        fileClose.setActionCommand(EAction.close.getCmd());
        this.items.put(EAction.close, fileClose);
        fileMenu.add(fileClose);

        final JMenuItem fileExit = new JMenuItem("Exit");
        fileExit.setMnemonic('x');
        fileExit.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F4, InputEvent.ALT_DOWN_MASK));
        fileExit.addActionListener(handler);
        fileExit.setActionCommand(EAction.exit.getCmd());
        this.items.put(EAction.exit, fileExit);
        fileMenu.add(fileExit);

        return fileMenu;
    }

    /**
     * Constructs the view menu.
     *
     * @param handler the handler that should receive actions generated by menu items
     * @return the view menu
     */
    private JMenu makeViewMenu(final ActionListener handler) {

        final JMenu viewMenu = new JMenu("View");
        viewMenu.setMnemonic('V');

        final JCheckBoxMenuItem viewEnableSkin = new JCheckBoxMenuItem("Enable skin");
        viewEnableSkin.setMnemonic('s');
        viewEnableSkin.addActionListener(handler);
        viewEnableSkin.setActionCommand(EAction.enableSkin.getCmd());
        this.items.put(EAction.enableSkin, viewEnableSkin);
        viewMenu.add(viewEnableSkin);

        viewMenu.add(new JSeparator());

        final JMenuItem viewVar = new JMenuItem("Variables");
        viewVar.setMnemonic('V');
        viewVar.addActionListener(handler);
        viewVar.setActionCommand(EAction.viewVariables.getCmd());
        this.items.put(EAction.viewVariables, viewVar);
        viewMenu.add(viewVar);

        final JMenuItem viewKeys = new JMenuItem("Keypress history");
        viewKeys.setMnemonic('K');
        viewKeys.addActionListener(handler);
        viewKeys.setActionCommand(EAction.viewKeypressHistory.getCmd());
        this.items.put(EAction.viewKeypressHistory, viewKeys);
        viewMenu.add(viewKeys);

        final JMenuItem viewLcd = new JMenuItem("Detached LCD");
        viewLcd.setMnemonic('L');
        viewLcd.addActionListener(handler);
        viewLcd.setActionCommand(EAction.viewDetachedLCD.getCmd());
        this.items.put(EAction.viewDetachedLCD, viewLcd);
        viewMenu.add(viewLcd);

        return viewMenu;
    }

    /**
     * Constructs the calculator menu.
     *
     * @param handler the handler that should receive actions generated by menu items
     * @return the calculator menu
     */
    private JMenu makeCalcMenu(final ActionListener handler) {

        final JMenu calcMenu = new JMenu("Calculator");
        calcMenu.setMnemonic('C');

        final JCheckBoxMenuItem calcEnSound = new JCheckBoxMenuItem("Enable sound");
        calcEnSound.setMnemonic('s');
        calcEnSound.addActionListener(handler);
        calcEnSound.setActionCommand(EAction.enableSound.getCmd());
        this.items.put(EAction.enableSound, calcEnSound);
        calcMenu.add(calcEnSound);

        final JMenuItem calcEnLink = new JMenuItem("Connect virtual link cable");
        calcEnLink.setMnemonic('l');
        calcEnLink.addActionListener(handler);
        calcEnLink.setActionCommand(EAction.enableLink.getCmd());
        this.items.put(EAction.enableLink, calcEnLink);
        calcMenu.add(calcEnLink);

        calcMenu.add(new JSeparator());

        final JMenuItem calcCopy = new JMenuItem("Copy last answer");
        calcCopy.setMnemonic('C');
        calcCopy.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_C, InputEvent.CTRL_DOWN_MASK));
        calcCopy.addActionListener(handler);
        calcCopy.setActionCommand(EAction.copyAnswer.getCmd());
        this.items.put(EAction.copyAnswer, calcCopy);
        calcMenu.add(calcCopy);

        final JMenuItem calcPaste = new JMenuItem("Paste value");
        calcPaste.setMnemonic('P');
        calcCopy.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_V, InputEvent.CTRL_DOWN_MASK));
        calcPaste.addActionListener(handler);
        calcPaste.setActionCommand(EAction.paste.getCmd());
        this.items.put(EAction.paste, calcPaste);
        calcMenu.add(calcPaste);

        calcMenu.add(new JSeparator());

        final JMenu calcSpeed = new JMenu("Speed");
        calcSpeed.setMnemonic('d');
        calcMenu.add(calcSpeed);

        final ButtonGroup speedRadio = new ButtonGroup();

        final JRadioButtonMenuItem speedPause = new JRadioButtonMenuItem("Pause");
        speedRadio.add(speedPause);
        speedPause.setMnemonic('P');
        speedPause.addActionListener(handler);
        speedPause.setActionCommand(EAction.pause.getCmd());
        this.items.put(EAction.pause, speedPause);
        calcSpeed.add(speedPause);

        final JRadioButtonMenuItem speed25 = new JRadioButtonMenuItem("25%");
        speedRadio.add(speed25);
        speed25.setMnemonic('2');
        speed25.addActionListener(handler);
        speed25.setActionCommand(EAction.speed25.getCmd());
        this.items.put(EAction.speed25, speed25);
        calcSpeed.add(speed25);

        final JRadioButtonMenuItem speed50 = new JRadioButtonMenuItem("50%");
        speedRadio.add(speed50);
        speed50.setMnemonic('5');
        speed50.addActionListener(handler);
        speed50.setActionCommand(EAction.speed50.getCmd());
        this.items.put(EAction.speed50, speed50);
        calcSpeed.add(speed50);

        final JRadioButtonMenuItem speed100 = new JRadioButtonMenuItem("100%");
        speedRadio.add(speed100);
        speed100.setMnemonic('1');
        speed100.addActionListener(handler);
        speed100.setActionCommand(EAction.speed100.getCmd());
        speed100.setSelected(true);
        this.items.put(EAction.speed100, speed100);
        calcSpeed.add(speed100);

        final JRadioButtonMenuItem speed200 = new JRadioButtonMenuItem("200%");
        speedRadio.add(speed200);
        speed200.setMnemonic('2');
        speed200.addActionListener(handler);
        speed200.setActionCommand(EAction.speed200.getCmd());
        this.items.put(EAction.speed200, speed200);
        calcSpeed.add(speed200);

        final JRadioButtonMenuItem speed400 = new JRadioButtonMenuItem("400%");
        speedRadio.add(speed400);
        speed400.setMnemonic('4');
        speed400.addActionListener(handler);
        speed400.setActionCommand(EAction.speed400.getCmd());
        this.items.put(EAction.speed400, speed400);
        calcSpeed.add(speed400);

        final JRadioButtonMenuItem speedMax = new JRadioButtonMenuItem("Maximum");
        speedRadio.add(speedMax);
        speedMax.setMnemonic('M');
        speedMax.addActionListener(handler);
        speedMax.setActionCommand(EAction.speedMax.getCmd());
        this.items.put(EAction.speedMax, speedMax);
        calcSpeed.add(speedMax);

        final JMenu calcProfile = new JMenu("Profile");
        calcProfile.setMnemonic('p');
        calcMenu.add(calcProfile);

        final ButtonGroup profiles = new ButtonGroup();

        final JRadioButtonMenuItem enableAll = new JRadioButtonMenuItem("Enable All");
        profiles.add(enableAll);
        enableAll.setMnemonic('a');
        enableAll.addActionListener(handler);
        enableAll.setActionCommand(EAction.profileFull.getCmd());
        this.items.put(EAction.profileFull, enableAll);
        calcProfile.add(enableAll);
        enableAll.setSelected(true);

        final JRadioButtonMenuItem graphing = new JRadioButtonMenuItem("Graphing");
        profiles.add(graphing);
        graphing.setMnemonic('g');
        graphing.addActionListener(handler);
        graphing.setActionCommand(EAction.profileGraphing.getCmd());
        this.items.put(EAction.profileGraphing, graphing);
        calcProfile.add(graphing);

        final JRadioButtonMenuItem scien = new JRadioButtonMenuItem("Scientific");
        profiles.add(scien);
        scien.setMnemonic('s');
        scien.addActionListener(handler);
        scien.setActionCommand(EAction.profileScientific.getCmd());
        this.items.put(EAction.profileScientific, scien);
        calcProfile.add(scien);

        final JRadioButtonMenuItem basic = new JRadioButtonMenuItem("Basic");
        profiles.add(basic);
        basic.setMnemonic('2');
        basic.addActionListener(handler);
        basic.setActionCommand(EAction.profileBasic.getCmd());
        this.items.put(EAction.profileBasic, basic);
        calcProfile.add(basic);

        calcMenu.add(new JSeparator());

        final JMenuItem calcOptions = new JMenuItem("Options");
        calcOptions.setMnemonic('O');
        calcOptions.addActionListener(handler);
        calcOptions.setActionCommand(EAction.options.getCmd());
        this.items.put(EAction.options, calcOptions);
        calcMenu.add(calcOptions);

        return calcMenu;
    }

    /**
     * Constructs the debug menu.
     *
     * @param handler the handler that should receive actions generated by menu items
     * @return the debug menu
     */
    private JMenu makeDebugMenu(final ActionListener handler) {

        final JMenu debugMenu = new JMenu("Debug");
        debugMenu.setMnemonic('D');

        final JMenuItem debugReset = new JMenuItem("Reset calculator");
        debugReset.setMnemonic('R');
        debugReset.addActionListener(handler);
        debugReset.setActionCommand(EAction.reset.getCmd());
        this.items.put(EAction.reset, debugReset);
        debugMenu.add(debugReset);

        final JMenuItem debugDebug = new JMenuItem("Open debugger");
        debugDebug.setMnemonic('d');
        debugDebug.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F11, 0));
        debugDebug.addActionListener(handler);
        debugDebug.setActionCommand(EAction.debug.getCmd());
        this.items.put(EAction.debug, debugDebug);
        debugMenu.add(debugDebug);

        final JMenuItem debugTurnOn = new JMenuItem("Turn on calculator");
        debugTurnOn.setMnemonic('o');
        debugTurnOn.addActionListener(handler);
        debugTurnOn.setActionCommand(EAction.turnOn.getCmd());
        this.items.put(EAction.turnOn, debugTurnOn);
        debugMenu.add(debugTurnOn);

        return debugMenu;
    }

    /**
     * Constructs the help menu.
     *
     * @param handler the handler that should receive actions generated by menu items
     * @return the help menu
     */
    private JMenu makeHelpMenu(final ActionListener handler) {

        final JMenu debugMenu = new JMenu("Help");
        debugMenu.setMnemonic('H');

        final JMenuItem helpWizard = new JMenuItem("Re-run setup wizard...");
        helpWizard.setMnemonic('s');
        helpWizard.addActionListener(handler);
        helpWizard.setActionCommand(EAction.runWizard.getCmd());
        this.items.put(EAction.runWizard, helpWizard);
        debugMenu.add(helpWizard);

        debugMenu.add(new JSeparator());

        final JMenuItem helpUpdates = new JMenuItem("Check for updates");
        helpUpdates.setMnemonic('u');
        helpUpdates.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F11, 0));
        helpUpdates.addActionListener(handler);
        helpUpdates.setActionCommand(EAction.checkUpdates.getCmd());
        this.items.put(EAction.checkUpdates, helpUpdates);
        debugMenu.add(helpUpdates);

        final JMenuItem helpWhatsNew = new JMenuItem("What's new...");
        helpWhatsNew.setMnemonic('n');
        helpWhatsNew.addActionListener(handler);
        helpWhatsNew.setActionCommand(EAction.showWhatsNew.getCmd());
        this.items.put(EAction.showWhatsNew, helpWhatsNew);
        debugMenu.add(helpWhatsNew);

        final JMenuItem helpBug = new JMenuItem("Report a bug...");
        helpBug.setMnemonic('n');
        helpBug.addActionListener(handler);
        helpBug.setActionCommand(EAction.reportBug.getCmd());
        this.items.put(EAction.reportBug, helpBug);
        debugMenu.add(helpBug);

        final JMenuItem helpWeb = new JMenuItem("Go to website");
        helpWeb.setMnemonic('n');
        helpWeb.addActionListener(handler);
        helpWeb.setActionCommand(EAction.openWebSite.getCmd());
        this.items.put(EAction.openWebSite, helpWeb);
        debugMenu.add(helpWeb);

        final JMenuItem helpAbout = new JMenuItem("About");
        helpAbout.setMnemonic('A');
        helpAbout.addActionListener(handler);
        helpAbout.setActionCommand(EAction.about.getCmd());
        this.items.put(EAction.about, helpAbout);
        debugMenu.add(helpAbout);

        return debugMenu;
    }
}
