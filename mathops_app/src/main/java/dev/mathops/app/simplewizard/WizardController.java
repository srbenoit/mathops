package dev.mathops.app.simplewizard;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 * This class is responsible for reacting to events generated by pushing any of the three buttons, 'Next', 'Previous',
 * and 'Cancel.' Based on what button is pressed, the controller will update the model to show a new panel and reset the
 * state of the buttons as necessary.
 */
class WizardController implements ActionListener {

    /** The {@code Wizard} that this controller is attached to. */
    private final Wizard wizard;

    /**
     * This constructor accepts a reference to the {@code Wizard} component that created it, which it uses to update the
     * button components and access the {@code WizardModel}.
     *
     * @param wiz a callback to the {@code Wizard} component that created this controller
     */
    WizardController(final Wizard wiz) {

        this.wizard = wiz;
    }

    /**
     * Calling method for the action listener interface. This class listens for actions performed by the buttons in the
     * {@code Wizard} class, and calls methods below to determine the correct course of action.
     *
     * @param e the {@code ActionEvent} that occurred
     */
    @Override
    public void actionPerformed(final ActionEvent e) {

        final String cmd = e.getActionCommand();

        switch (cmd) {
            case Wizard.CANCEL_BUTTON_ACTION_COMMAND -> cancelButtonPressed();
            case Wizard.BACK_BUTTON_ACTION_COMMAND -> backButtonPressed();
            case Wizard.NEXT_BUTTON_ACTION_COMMAND -> nextButtonPressed();
        }
    }

    /**
     * Handler for presses on the Cancel button.
     */
    private void cancelButtonPressed() {

        this.wizard.close(Wizard.CANCEL_RETURN_CODE);
    }

    /**
     * Handler for presses on the Next button.
     */
    private void nextButtonPressed() {

        final WizardModel model = this.wizard.getModel();
        final WizardPanelDescriptor descriptor = model.getCurrentPanelDescriptor();
        final String nextPanelDescriptor = descriptor.getNextPanelDescriptor();

        // If it is a finishable panel, close down the dialog. Otherwise, get the ID that the
        // current panel identifies as the next panel, and display it.
        if (nextPanelDescriptor.equals(WizardPanelDescriptor.FINISH)) {
            this.wizard.close(Wizard.FINISH_RETURN_CODE);
        } else {
            this.wizard.setCurrentPanel(nextPanelDescriptor);
        }
    }

    /**
     * Handler for presses on the Back button.
     */
    private void backButtonPressed() {

        final WizardModel model = this.wizard.getModel();
        final WizardPanelDescriptor descriptor = model.getCurrentPanelDescriptor();
        final String backPanelDescriptor = descriptor.getBackPanelDescriptor();

        // get the descriptor the current panel identifies as the previous panel and display it
        this.wizard.setCurrentPanel(backPanelDescriptor);
    }

    /**
     * Reset the buttons to support the original panel rules, including whether the next or back buttons are enabled or
     * disabled, or if the panel is finishable.
     */
    final void resetButtonsToPanelRules() {

        final WizardModel model = this.wizard.getModel();
        final WizardPanelDescriptor descriptor = model.getCurrentPanelDescriptor();

        model.setCancelButtonText(Res.get(Res.CANCEL_TEXT));
        model.setCancelButtonIcon(Wizard.getImage("cancelIcon.gif"));

        // If the panel in question has another panel behind it, enable the back button. Otherwise,
        // disable it.
        model.setBackButtonText(Res.get(Res.BACK_TEXT));
        model.setBackButtonIcon(Wizard.getImage("backIcon.gif"));

        if (descriptor.getBackPanelDescriptor() != null) {
            model.setBackButtonEnabled(Boolean.TRUE);
        } else {
            model.setBackButtonEnabled(Boolean.FALSE);
        }

        // If the panel in question has one or more panels in front of it, enable the next button.
        // Otherwise, disable it.
        if (descriptor.getNextPanelDescriptor() != null) {
            model.setNextFinishButtonEnabled(Boolean.TRUE);
        } else {
            model.setNextFinishButtonEnabled(Boolean.FALSE);
        }

        // If the panel in question is the last panel in the series, change the Next button to
        // Finish. Otherwise, set the text back to Next.
        if (descriptor.getNextPanelDescriptor().equals(WizardPanelDescriptor.FINISH)) {
            model.setNextFinishButtonText(Res.get(Res.FINISH_TEXT));
            model.setNextFinishButtonIcon(Wizard.getImage("finishIcon.gif"));
        } else {
            model.setNextFinishButtonText(Res.get(Res.NEXT_TEXT));
            model.setNextFinishButtonIcon(Wizard.getImage("nextIcon.gif"));
        }
    }
}
