package dev.mathops.app.ui;

import dev.mathops.commons.log.Log;

import javax.swing.SwingUtilities;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.Serial;

/**
 * An extension of an internal panel that causes the panel to act as a dialog. The dialog acts as an action listener for
 * the dialog buttons, and a method is available to wait until a button has been selected. A stub method for validating
 * input gives subclasses the ability to veto button presses.
 */
public abstract class AbstractInternalDialogBase extends InternalPanelBase implements ActionListener {

    /** Version number for serialization. */
    @Serial
    private static final long serialVersionUID = -4377321881034033222L;

    /** An optional listener to be notified when the user selects a button. */
    private final ActionListener listener;

    /**
     * Constructs a new {@code InternalDialogBase}.
     *
     * @param theResOwner the object that is creating this dialog; to be used as the base for resource loading
     * @param theUsername the name of the logged-in user
     * @param theListener an optional listener to be notified when the user selects a button
     */
    protected AbstractInternalDialogBase(final Object theResOwner, final String theUsername,
                                         final ActionListener theListener) {

        super(theResOwner, theUsername);

        if (!SwingUtilities.isEventDispatchThread()) {
            Log.warning(Res.get(Res.NOT_AWT_THREAD));
        }

        this.listener = theListener;
    }

    /**
     * Handler for action events generated by dialog buttons.
     *
     * @param e The action event to be processed.
     */
    @Override
    public final void actionPerformed(final ActionEvent e) {

        if (!SwingUtilities.isEventDispatchThread()) {
            Log.warning(Res.get(Res.NOT_AWT_THREAD));
        }

        final String cmd = e.getActionCommand();
        if (validateAction(cmd)) {

            if (this.listener != null) {
                this.listener.actionPerformed(e);
            }
        }
    }

    /**
     * A stub method that subclasses can override to validate a command.
     *
     * @param cmd the command generated by a dialog button press
     * @return {@code true} to accept the command, {@code false} to veto the command
     */
    protected abstract boolean validateAction(String cmd);
}
