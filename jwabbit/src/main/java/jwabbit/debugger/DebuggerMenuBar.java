package jwabbit.debugger;

/*
 * This software was derived from the Wabbitemu software, as it existed in October 2015, by Steve Benoit. This software
 * is licensed under the GNU General Public License version 2 (GPLv2). See the disclaimers or warranty and liability
 * included in the terms of that license.
 */

import jwabbit.gui.fonts.Fonts;
import jwabbit.iface.Calc;

import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JSeparator;
import javax.swing.KeyStroke;
import java.awt.Font;
import java.awt.event.ActionListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.io.Serial;
import java.util.EnumMap;
import java.util.Map;

/**
 * The debugger menu bar.
 */
final class DebuggerMenuBar extends JMenuBar {

    /** Version number for serialization. */
    @Serial
    private static final long serialVersionUID = -668649441043338199L;

    /** The font to use for menus and menu items. */
    private final Font font;

    /** Map from action to item, so we can find items to enable/disable. */
    private final Map<EAction, JMenuItem> items;

    /**
     * Constructs a new {@code DebuggerMenuBar}.
     *
     * @param handler the handler that should receive actions generated by menu items
     */
    DebuggerMenuBar(final ActionListener handler) {

        super();

        this.font = Fonts.getSans().deriveFont(Font.PLAIN, 11.0f);
        this.items = new EnumMap<>(EAction.class);

        add(makeFileMenu(handler));
        add(makeViewMenu(handler));
        add(makeRunMenu(handler));
        add(makeToolsMenu(handler));
    }

    /**
     * Makes the file menu.
     *
     * @param handler the handler that should receive actions generated by menu items
     * @return the file menu
     */
    private JMenu makeFileMenu(final ActionListener handler) {

        final JMenu fileMenu = new JMenu("File");
        fileMenu.setFont(this.font);
        fileMenu.setMnemonic('F');

        final JMenuItem fileReset = new JMenuItem("Reset");
        fileReset.setFont(this.font);
        fileReset.setMnemonic('R');
        fileReset.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_R, InputEvent.CTRL_DOWN_MASK));
        fileReset.setActionCommand(EAction.resetCalc.getCmd());
        fileReset.addActionListener(handler);
        fileMenu.add(fileReset);
        this.items.put(EAction.resetCalc, fileReset);

        final JMenuItem fileExit = new JMenuItem("Exit");
        fileExit.setFont(this.font);
        fileExit.setMnemonic('x');
        fileExit.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_W, InputEvent.CTRL_DOWN_MASK));
        fileExit.setActionCommand(EAction.exit.getCmd());
        fileExit.addActionListener(handler);
        fileMenu.add(fileExit);
        this.items.put(EAction.exit, fileReset);

        return fileMenu;
    }

    /**
     * Makes the view menu.
     *
     * @param handler the handler that should receive actions generated by menu items
     * @return the view menu
     */
    private JMenu makeViewMenu(final ActionListener handler) {

        final JMenu viewMenu = new JMenu("View");
        viewMenu.setFont(this.font);
        viewMenu.setMnemonic('V');

        final JMenu viewMem = new JMenu("Memory view");
        viewMem.setFont(this.font);
        viewMem.setMnemonic('M');
        viewMenu.add(viewMem);

        final JMenuItem viewMemAdd = new JMenuItem("Add memory view");
        viewMemAdd.setFont(this.font);
        viewMemAdd.setMnemonic('A');
        viewMemAdd.setActionCommand(EAction.addMemoryView.getCmd());
        viewMemAdd.addActionListener(handler);
        viewMem.add(viewMemAdd);
        this.items.put(EAction.addMemoryView, viewMemAdd);

        final JMenuItem viewMemRem = new JMenuItem("Remove memory view");
        viewMemRem.setFont(this.font);
        viewMemRem.setMnemonic('R');
        viewMemRem.setActionCommand(EAction.removeMemoryView.getCmd());
        viewMemRem.addActionListener(handler);
        viewMem.add(viewMemRem);
        this.items.put(EAction.removeMemoryView, viewMemRem);

        final JMenu viewDis = new JMenu("Disassembly");
        viewDis.setFont(this.font);
        viewDis.setMnemonic('D');
        viewMenu.add(viewDis);

        final JMenuItem viewDisAdd = new JMenuItem("Add disassembly");
        viewDisAdd.setFont(this.font);
        viewDisAdd.setMnemonic('A');
        viewDisAdd.setActionCommand(EAction.addDisasmView.getCmd());
        viewDisAdd.addActionListener(handler);
        viewDis.add(viewDisAdd);
        this.items.put(EAction.addDisasmView, viewDisAdd);

        final JMenuItem viewDisRem = new JMenuItem("Remove disassembly");
        viewDisRem.setFont(this.font);
        viewDisRem.setMnemonic('R');
        viewDisRem.setActionCommand(EAction.removeDisasmView.getCmd());
        viewDisRem.addActionListener(handler);
        viewDis.add(viewDisRem);
        this.items.put(EAction.removeDisasmView, viewDisRem);

        return viewMenu;
    }

    /**
     * Makes the run menu.
     *
     * @param handler the handler that should receive actions generated by menu items
     * @return the run menu
     */
    private JMenu makeRunMenu(final ActionListener handler) {

        final JMenu runMenu = new JMenu("Run");
        runMenu.setFont(this.font);
        runMenu.setMnemonic('R');

        final JMenuItem runRun = new JMenuItem("Run");
        runRun.setFont(this.font);
        runRun.setMnemonic('R');
        runRun.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F5, 0));
        runRun.setActionCommand(EAction.runCalc.getCmd());
        runRun.addActionListener(handler);
        runMenu.add(runRun);
        this.items.put(EAction.runCalc, runRun);

        final JMenuItem runStop = new JMenuItem("Stop");
        runStop.setFont(this.font);
        runStop.setMnemonic('S');
        runStop.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F6, 0));
        runStop.setActionCommand(EAction.stopCalc.getCmd());
        runStop.addActionListener(handler);
        runStop.setEnabled(false);
        runMenu.add(runStop);
        this.items.put(EAction.stopCalc, runStop);

        final JMenuItem runTimed = new JMenuItem("Run Timed");
        runTimed.setFont(this.font);
        runTimed.setMnemonic('T');
        runTimed.setActionCommand(EAction.runCalcTimed.getCmd());
        runTimed.addActionListener(handler);
        runMenu.add(runTimed);
        this.items.put(EAction.runCalcTimed, runTimed);

        runMenu.add(new JSeparator());

        final JMenuItem runStep = new JMenuItem("Step");
        runStep.setFont(this.font);
        runStep.setMnemonic('S');
        runStep.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F7, 0));
        runStep.setActionCommand(EAction.stepCalc.getCmd());
        runStep.addActionListener(handler);
        runMenu.add(runStep);
        this.items.put(EAction.stepCalc, runStep);

        final JMenuItem runOver = new JMenuItem("Step over");
        runOver.setFont(this.font);
        runOver.setMnemonic('v');
        runOver.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F8, 0));
        runOver.setActionCommand(EAction.stepOverCalc.getCmd());
        runOver.addActionListener(handler);
        runMenu.add(runOver);
        this.items.put(EAction.stepOverCalc, runOver);

        final JMenuItem runOut = new JMenuItem("Step out");
        runOut.setFont(this.font);
        runOut.setMnemonic('u');
        runOut.setActionCommand(EAction.stepOutCalc.getCmd());
        runOut.addActionListener(handler);
        runMenu.add(runOut);
        this.items.put(EAction.stepOutCalc, runOut);

        return runMenu;
    }

    /**
     * Makes the tools menu.
     *
     * @param handler the handler that should receive actions generated by menu items
     * @return the tools menu
     */
    private JMenu makeToolsMenu(final ActionListener handler) {

        final JMenu toolsMenu = new JMenu("Tools");
        toolsMenu.setFont(this.font);
        toolsMenu.setMnemonic('T');

        final JMenuItem toolsDump = new JMenuItem("Dump memory...");
        toolsDump.setFont(this.font);
        toolsDump.setMnemonic('D');
        toolsDump.setActionCommand(EAction.dumpMem.getCmd());
        toolsDump.addActionListener(handler);
        toolsMenu.add(toolsDump);
        this.items.put(EAction.dumpMem, toolsDump);

        final JMenuItem toolsProf = new JMenuItem("Profiler...");
        toolsProf.setFont(this.font);
        toolsProf.setMnemonic('P');
        toolsProf.setActionCommand(EAction.profile.getCmd());
        toolsProf.addActionListener(handler);
        toolsMenu.add(toolsProf);
        this.items.put(EAction.profile, toolsProf);

        final JMenuItem toolsCode = new JMenuItem("Code counter...");
        toolsCode.setFont(this.font);
        toolsCode.setMnemonic('C');
        toolsCode.setActionCommand(EAction.codeCount.getCmd());
        toolsCode.addActionListener(handler);
        toolsMenu.add(toolsCode);
        this.items.put(EAction.codeCount, toolsCode);

        return toolsMenu;
    }

    /**
     * Sets state of buttons.
     *
     * @param theCalc the calculator
     */
    public void setState(final Calc theCalc) {

        // Called from the AWT event thread

        this.items.get(EAction.runCalc).setEnabled(!theCalc.isRunning());
        this.items.get(EAction.stopCalc).setEnabled(theCalc.isRunning());
        this.items.get(EAction.runCalcTimed).setEnabled(!theCalc.isRunning());
        this.items.get(EAction.stepCalc).setEnabled(!theCalc.isRunning());
        this.items.get(EAction.stepOverCalc).setEnabled(!theCalc.isRunning());
        this.items.get(EAction.stepOutCalc).setEnabled(!theCalc.isRunning());
        this.items.get(EAction.dumpMem).setEnabled(!theCalc.isRunning());
        this.items.get(EAction.profile).setEnabled(!theCalc.isRunning());
        this.items.get(EAction.codeCount).setEnabled(!theCalc.isRunning());
    }
}
