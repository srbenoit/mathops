package dev.mathops.app.teststation;

import dev.mathops.commons.CoreConstants;
import dev.mathops.commons.log.Log;
import dev.mathops.text.builder.HtmlBuilder;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JDesktopPane;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.Serial;
import java.util.Map;

/**
 * A panel that provides student feedback after the exam.
 */
class FeedbackPanel extends JInternalFrame implements ActionListener {

    /** A version code for serialization compatibility checking. */
    @Serial
    private static final long serialVersionUID = -8693560120443218678L;

    /** Flag indicating dialog should be displayed. */
    private transient boolean done;

    /**
     * Constructs a new {@code FeedbackPanel}, creating the user interface from the skin settings.
     *
     * @param desk          the desktop pane that will contain the dialog
     * @param subtestScores a hashtable of scores, key is subtest name, value is score
     * @param error         an error message if exam grading failed
     * @param baseColor     the color of the background screen this panel lives on
     */
    FeedbackPanel(final JDesktopPane desk, final Map<String, Integer> subtestScores,
                  final String error, final Color baseColor) {

        super("Exam Results", false, false, false, false);

        final FeedbackPanelGuiBuilder builder;

        builder = new FeedbackPanelGuiBuilder(desk, subtestScores, error, this, baseColor);

        try {
            SwingUtilities.invokeAndWait(builder);
        } catch (final Exception e) {
            Log.warning(e);
        }
    }

    /**
     * Displays the panel, and wait for the "Done" button to be pressed.
     *
     * @param timeout the maximum time (in milliseconds) to show the panel
     */
    public void waitForDone(final long timeout) {

        final long end = System.currentTimeMillis() + timeout;

        this.done = false;

        while (this.isVisible() && (!this.done)) {

            try {
                Thread.sleep(250L);
            } catch (final InterruptedException e) { /* Empty */
            }

            if (System.currentTimeMillis() > end) {
                break;
            }
        }
    }

    /**
     * Handles action events generated by pressing the Login or Exit buttons.
     *
     * @param e the {@code ActionEvent} to be processed
     */
    @Override
    public void actionPerformed(final ActionEvent e) {

        if (!SwingUtilities.isEventDispatchThread()) {
            Log.warning(Res.get(Res.NOT_AWT_THREAD));
        }

        this.done = true;
    }
}

/**
 * Constructs the dialog's GUI.
 */
class FeedbackPanelGuiBuilder implements Runnable {

    /** The pane in which to center the dialog. */
    private final JDesktopPane deskPane;

    /** The panel whose GUI is to be built. */
    private final FeedbackPanel panel;

    /** The background color of the underlying window. */
    private final Color baseColor;

    /** A hashtable of scores, key is subtest name, value is score. */
    private final Map<String, Integer> subtestScores;

    /** An error message if exam grading failed. */
    private final String error;

    /**
     * Constructs a new {@code FeedbackPanelGuiBuilder}.
     *
     * @param theDesk          the desktop pane in which to center the dialog
     * @param theSubtestScores a hashtable of scores, key is subtest name, value is score
     * @param theError         an error message if exam grading failed
     * @param thePanel         the panel whose GUI is to be built
     * @param theBaseColor     the background color of the window on which the panel is to sit
     */
    FeedbackPanelGuiBuilder(final JDesktopPane theDesk, final Map<String, Integer> theSubtestScores,
                            final String theError, final FeedbackPanel thePanel, final Color theBaseColor) {

        this.deskPane = theDesk;
        this.panel = thePanel;
        this.baseColor = theBaseColor;
        this.subtestScores = theSubtestScores;
        this.error = theError;
    }

    /**
     * Constructs the user interface.
     */
    @Override
    public void run() {

        if (!SwingUtilities.isEventDispatchThread()) {
            Log.warning(Res.get(Res.NOT_AWT_THREAD));
        }

        final JPanel content = new JPanel();
        content.setBorder(BorderFactory.createEmptyBorder(15, 15, 15, 15));
        content.setLayout(new BorderLayout(10, 10));
        this.panel.setContentPane(content);

        // Make this panel a light version of the background color
        int r = this.baseColor.getRed();
        int g = this.baseColor.getGreen();
        int b = this.baseColor.getBlue();
        r = r + ((255 - r) / 2);
        g = g + ((255 - g) / 2);
        b = b + ((255 - b) / 2);

        final Color bg = new Color(r, g, b);
        content.setBackground(bg);

        // Create the message
        final Integer score = this.subtestScores.get("score");
        final HtmlBuilder str = new HtmlBuilder(100);

        if (score != null) {
            str.add("<html>Your score on this exam was <strong>", score, //
                    "</strong>.<br/></html>");
        } else if (this.error != null) {
            str.add("<html>There was an error grading the exam:<br/>", this.error, //
                    "</html>");
        } else {
            str.add("<html>Your exam results will be available online...",
                    "<br/>Check the handout you were given for details.</html>");
        }

        final JLabel lbl = new JLabel(str.toString());
        lbl.setBackground(bg);
        content.add(lbl, BorderLayout.NORTH);

        // Create the OK button
        final JPanel inner = new JPanel(new GridLayout(1, 3, 10, 10));
        inner.setBackground(bg);
        inner.add(new JLabel(CoreConstants.SPC));

        final JButton btn = new JButton("OK");
        btn.setBackground(bg);
        btn.addActionListener(this.panel);
        inner.add(btn);
        inner.add(new JLabel(CoreConstants.SPC));
        content.add(inner, BorderLayout.SOUTH);

        this.panel.getRootPane().setDefaultButton(btn);
        this.panel.pack();

        final Dimension screen = this.deskPane.getSize();
        final Dimension size = this.panel.getSize();
        this.panel.setLocation((screen.width - size.width) / 2, (screen.height - size.height) / 2);
        this.panel.setVisible(true);
        this.panel.requestFocus(true);
    }
}
