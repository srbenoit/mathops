package jwabbit.gui.options;

/*
 * This software was derived from the Wabbitemu software, as it existed in October 2015, by Steve Benoit. This software
 * is licensed under the GNU General Public License version 2 (GPLv2). See the disclaimers or warranty and liability
 * included in the terms of that license.
 */

import jwabbit.gui.Registry;
import jwabbit.log.LoggedObject;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.SwingUtilities;
import javax.swing.WindowConstants;
import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.lang.reflect.InvocationTargetException;
import java.util.Properties;

/**
 * A dialog to present options. Options are loaded from the properties file, and on save, they are written to the
 * properties file (not installed in the running calculator). Options are global, not specific to a single calculator
 * instance.
 */
public final class OptionsDialog implements ActionListener, Runnable {

    /** Object on which to synchronize construction of singleton instance. */
    private static final Object INSTANCE_SYNCH = new Object();

    /** The singleton instance. */
    private static OptionsDialog instance;

    /** The frame. */
    private JFrame frame;

    /**
     * Constructs a new {@code OptionsDialog}, which constructs the frame and controls, but does not show the dialog.
     */
    private OptionsDialog() {

        super();

        if (SwingUtilities.isEventDispatchThread()) {
            run();
        } else {
            try {
                SwingUtilities.invokeAndWait(this);
            } catch (final InvocationTargetException ex) {
                LoggedObject.LOG.warning("Failed to construct OptionsDialog", ex);
            } catch (final InterruptedException ex) {
                Thread.currentThread().interrupt();
            }
        }
    }

    /**
     * Shows the dialog, creating it if not created previously.
     */
    public static void show() {

        synchronized (INSTANCE_SYNCH) {
            if (instance == null) {
                instance = new OptionsDialog();
            }
        }

        instance.frame.setVisible(true);
    }

    /**
     * Constructs the UI in the AWT event thread.
     */
    @Override
    public void run() {

        this.frame = new JFrame("JWabbitemu Options");
        this.frame.setType(Window.Type.UTILITY);
        this.frame.setDefaultCloseOperation(WindowConstants.HIDE_ON_CLOSE);
        this.frame.setResizable(false);

        final JPanel content = new JPanel(new BorderLayout());
        this.frame.setContentPane(content);

        final JTabbedPane tabs = new JTabbedPane();
        tabs.setBorder(BorderFactory.createEmptyBorder(4, 3, 4, 3));
        content.add(tabs, BorderLayout.CENTER);

        final Properties props = Registry.getProperties();

        final GeneralTab general = new GeneralTab();
        final CaptureTab capture = new CaptureTab();
        final DisplayTab display = new DisplayTab();
        final ROMTab rom = new ROMTab();
        final SkinTab skin = new SkinTab();
        final KeysTab keys = new KeysTab();

        tabs.addTab("General", general);
        tabs.addTab("Screen Capture", capture);
        tabs.addTab("Display", display);
        tabs.addTab("ROM", rom);
        tabs.addTab("Skin", skin);
        tabs.addTab("Keys", keys);

        final JButton ok = new JButton("OK");
        final JButton cancel = new JButton("Cancel");
        final JButton apply = new JButton("Apply");
        apply.setEnabled(false);

        ok.addActionListener(this);
        cancel.addActionListener(this);
        apply.addActionListener(this);

        final JPanel buttons = new JPanel(new FlowLayout(FlowLayout.TRAILING));
        buttons.add(ok);
        buttons.add(cancel);
        buttons.add(apply);
        content.add(buttons, BorderLayout.PAGE_END);

        this.frame.pack();
    }

    /**
     * Handles actions generated by the "OK", "Cancel", and "Apply" buttons.
     */
    @Override
    public void actionPerformed(final ActionEvent e) {

        // Auto-generated method stub
    }
}
