package dev.mathops.app.teststation;

import dev.mathops.commons.log.Log;
import dev.mathops.commons.log.LogEntry;
import dev.mathops.commons.log.LogWriter;
import dev.mathops.text.builder.HtmlBuilder;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JDesktopPane;
import javax.swing.JInternalFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.SwingUtilities;
import javax.swing.border.Border;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.Serial;

/**
 * A dialog that displays the log in a scrolling window.
 */
final class LogViewPanel extends JInternalFrame implements ActionListener {

    /** Version number for serialization. */
    @Serial
    private static final long serialVersionUID = 7710028022845710667L;

    /**
     * Constructs a new {@code LogViewPanel} panel.
     *
     * @param desk the desktop pane that will contain the dialog
     */
    LogViewPanel(final JDesktopPane desk) {

        super("Log Viewer", true, true, true, false);

        final Runnable builder = new LogViewPanelGuiBuilder(desk, this);

        if (SwingUtilities.isEventDispatchThread()) {
            builder.run();
        } else {
            try {
                SwingUtilities.invokeAndWait(builder);
            } catch (final Exception e) { /* Empty */
            }
        }
    }

    /**
     * Handles button presses on the OK button.
     *
     * @param e the action event generated by the button press
     */
    @Override
    public void actionPerformed(final ActionEvent e) {

        if (!SwingUtilities.isEventDispatchThread()) {
            final String msg = Res.get(Res.NOT_AWT_THREAD);
            Log.warning(msg);
        }

        setVisible(false);
        dispose();
    }
}

/**
 * A runnable that is to be called in the AWT event dispatcher thread to construct the dialog's GUI.
 */
class LogViewPanelGuiBuilder implements Runnable {

    /** The pane in which to center the dialog. */
    private final JDesktopPane deskPane;

    /** The panel whose GUI is to be built. */
    private final LogViewPanel panel;

    /** The text area. */
    private JTextArea text;

    /**
     * Constructs a new {@code LogViewPanelGuiBuilder}.
     *
     * @param desk     the desktop pane in which to center the dialog
     * @param thePanel the panel whose GUI is to be built
     */
    LogViewPanelGuiBuilder(final JDesktopPane desk, final LogViewPanel thePanel) {

        this.deskPane = desk;
        this.panel = thePanel;
    }

    /**
     * Gets the text area that was generated.
     *
     * @return the text area
     */
    public JTextArea getText() {

        return this.text;
    }

    /**
     * Constructs the user interface.
     */
    @Override
    public void run() {

        if (!SwingUtilities.isEventDispatchThread()) {
            final String msg = Res.get(Res.NOT_AWT_THREAD);
            Log.warning(msg);
        }

        final JPanel content = new JPanel(new BorderLayout());

        final Dimension deskSize = this.deskPane.getSize();
        content.setPreferredSize(new Dimension(deskSize.width * 3 / 4, deskSize.height * 3 / 4));
        this.panel.setContentPane(content);

        final JPanel center = new JPanel(new BorderLayout());
        final Border padding = BorderFactory.createEmptyBorder(15, 15, 15, 15);
        center.setBorder(padding);
        center.setLayout(new BorderLayout(10, 10));
        content.add(center, BorderLayout.CENTER);

        final LogWriter writer = Log.getWriter();
        final int count = writer.getNumInList();
        final HtmlBuilder builder = new HtmlBuilder(100 * count);
        for (int i = 0; i < count; ++i) {
            final LogEntry entry = writer.getListMessage(i);
            final String message = entry.getMessage();
            builder.addln(message);
        }

        // Build the log text area
        final String str = builder.toString();
        this.text = new JTextArea(str);
        final JScrollPane scroll = new JScrollPane(this.text);
        center.add(scroll, BorderLayout.CENTER);

        // Create the OK button
        final JPanel south = new JPanel(new FlowLayout(FlowLayout.CENTER));
        final JButton btn = new JButton("OK");
        btn.addActionListener(this.panel);
        south.add(btn);
        center.add(south, BorderLayout.PAGE_END);

        this.panel.getRootPane().setDefaultButton(btn);

        this.panel.setFocusCycleRoot(true);
        this.panel.pack();

        final Dimension screen = this.deskPane.getSize();
        final Dimension size = this.panel.getSize();
        this.panel.setLocation((screen.width - size.width) / 2, (screen.height - size.height) / 2);
        this.panel.setVisible(true);
        this.panel.requestFocus();
    }
}
