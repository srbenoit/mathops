package dev.mathops.app.unit;

import dev.mathops.app.InternalPanelBase;
import dev.mathops.core.builder.HtmlBuilder;
import dev.mathops.core.log.Log;

import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.Serial;
import java.lang.reflect.InvocationTargetException;
import java.util.Map;
import java.util.Properties;

/**
 * A panel that provides student feedback after the exam.
 */
class FeedbackPanel extends InternalPanelBase implements ActionListener {

    /** Version number for serialization. */
    @Serial
    private static final long serialVersionUID = 4244548811961424080L;

    /**
     * Constructs a new {@code FeedbackPanel}, creating the user interface from the skin settings.
     *
     * @param theUsername   the name of the logged in user
     * @param subtestScores a hashtable of scores, key is subtest name, value is score
     * @param examGrades    a hashtable of grades, key is grading rule name, value is grade
     */
    FeedbackPanel(final String theUsername, final Map<String, Integer> subtestScores,
                  final Map<String, Object> examGrades) {

        super(null, theUsername);

        setResOwner(this);
        final Properties res = new DefaultFeedbackPanelSkin();

        final Runnable builder = new FeedbackGUIBuilder(this, res, subtestScores, examGrades);

        try {
            SwingUtilities.invokeAndWait(builder);
        } catch (final InterruptedException | InvocationTargetException ex) {
            Log.warning(ex);
        }
    }

    /**
     * Present the dialog centered in the desktop panel, and set the cursor to the WAIT cursor.
     *
     * @param desktop  the desktop panel
     * @param listener the listener to receive the Done button press event
     */
    final void show(final JPanel desktop, final ActionListener listener) {

        try {
            SwingUtilities.invokeAndWait(new ShowFeedback(desktop, this, listener));
        } catch (final InterruptedException | InvocationTargetException ex) {
            Log.warning(ex);
        }
    }

    /**
     * Present the dialog centered in the desktop panel, and set the cursor to the WAIT cursor.
     *
     * @param desktop the desktop panel
     */
    final void close(final JPanel desktop) {

        try {
            SwingUtilities.invokeAndWait(new CloseFeedback(desktop, this));
        } catch (final InterruptedException | InvocationTargetException ex) {
            Log.warning(ex);
        }
    }

    /**
     * Handler for action events generated by pressing the Login or Exit buttons.
     *
     * @param e the {@code ActionEvent} to be processed
     */
    @Override
    public void actionPerformed(final ActionEvent e) {

        final String cmd = e.getActionCommand();

        if ("Done".equals(cmd)) {
            fireAction("Logout");
        }
    }
}

/**
 * A class to construct the GUI in the AWT event thread.
 */
class FeedbackGUIBuilder implements Runnable {

    /** The owning panel. */
    private final FeedbackPanel owner;

    /** The resource properties from which to get GUI settings. */
    private final Properties res;

    /** A hashtable of scores, key is subtest name, value is score. */
    private final Map<String, Integer> subtestScores;

    /** A hashtable of grades, key is grading rule name, value is grade. */
    private final Map<String, Object> examGrades;

    /**
     * Constructs a new {@code FeedbackGUIBuilder}.
     *
     * @param theOwner         the owning panel
     * @param resources        the resource properties from which to get GUI settings
     * @param theSubtestScores a hashtable of scores, key is subtest name, value is score
     * @param theExamGrades    a hashtable of grades, key is grading rule name, value is grade
     */
    FeedbackGUIBuilder(final FeedbackPanel theOwner, final Properties resources,
                       final Map<String, Integer> theSubtestScores, final Map<String, Object> theExamGrades) {

        this.owner = theOwner;
        this.res = resources;
        this.subtestScores = theSubtestScores;
        this.examGrades = theExamGrades;
    }

    /**
     * Constructs the user interface, intended to be run in the AWT event dispatch thread.
     */
    @Override
    public void run() {

        if (this.subtestScores == null || this.examGrades == null) {
            return;
        }

        // Build the info display based on score data.
        final Integer score = this.subtestScores.get("score");

        final HtmlBuilder str = new HtmlBuilder(200);

        if (score == null) {
            str.add("<html>Your exam was not graded.</html>");
        } else {
            str.add("<html>Your score on this exam was &nbsp; <strong>", score, "</strong>.").br();

            final Object passed = this.examGrades.get("passed");
            if (passed instanceof final Boolean passedBool) {
                if (passedBool.booleanValue()) {
                    str.br().add("This is a <strong>PASSING</strong> score.");
                } else {
                    str.br().add("This is <strong>NOT</strong> a passing score.");
                }
            }

            str.add("</html>");
        }

        // Set the border for the frame, which may be decorated or undecorated,
        // and set the frame size and background (color or image)
        this.owner.setupFrame(this.res);

        // Create all the text labels
        this.owner.createSingleLabel(this.res, "info", str.toString());
        this.owner.createSingleLabel(this.res, "copyright");

        // Create the buttons
        final JButton done = new JButton();
        done.setActionCommand("Done");
        done.addActionListener(this.owner);
        this.owner.configureButton(this.res, done, "done");

        // Treat the "Enter" key as a click on the Done button
        this.owner.getRootPane().setDefaultButton(done);

        this.owner.requestFocus();
    }
}

/**
 * A class to display the dialog in the AWT event thread.
 */
class ShowFeedback implements Runnable {

    /** The desktop in which to install the panel. */
    private final JPanel desktop;

    /** The feedback panel to show. */
    private final FeedbackPanel panel;

    /** The listener for action events. */
    private final ActionListener listener;

    /**
     * Construct a new {@code ShowFeedback}.
     *
     * @param theDesktop  the desktop to which to add the panel
     * @param thePanel    the panel to add to the desktop
     * @param theListener the listener to receive the Done button press event
     */
    ShowFeedback(final JPanel theDesktop, final FeedbackPanel thePanel,
                 final ActionListener theListener) {

        this.desktop = theDesktop;
        this.panel = thePanel;
        this.listener = theListener;
    }

    /**
     * Runnable method to display the dialog; intended to be called in the AWT event thread.
     */
    @Override
    public void run() {

        this.desktop.setLayout(null);
        this.desktop.add(this.panel);
        this.panel.centerInDesktop();
        this.panel.setVisible(true);
        this.panel.addActionListener(this.listener);
    }
}

/**
 * A class to close the dialog in the AWT event thread.
 */
class CloseFeedback implements Runnable {

    /** The desktop from which to remove the panel. */
    private final JPanel desktop;

    /** The feedback panel to close. */
    private final FeedbackPanel panel;

    /**
     * Construct a new {@code CloseFeedback}.
     *
     * @param theDesktop the desktop from which to remove the panel
     * @param thePanel   the panel to close
     */
    CloseFeedback(final JPanel theDesktop, final FeedbackPanel thePanel) {

        this.desktop = theDesktop;
        this.panel = thePanel;
    }

    /**
     * Runnable method to close the dialog; intended to be called in the AWT event thread.
     */
    @Override
    public void run() {

        this.panel.setVisible(false);
        this.desktop.remove(this.panel);
        this.panel.dispose();
    }
}

/**
 * A resource bundle class that contains the default settings for the panel.
 */
class DefaultFeedbackPanelSkin extends Properties {

    /** Version number for serialization. */
    @Serial
    private static final long serialVersionUID = 7905545097310093892L;

    /** The default settings. */
    private static final String[][] CONTENTS = {//
            {"panel-title", "Operation in Progress"},
            {"panel-width", "350"},
            {"panel-height", "100"},
            {"panel-border-style", "line"},
            {"panel-border-size", "1"},
            {"panel-border-color", "black"},
            {"panel-background-color", "gray80"},
            {"wait-text",
                    "<HTML>Your exam results will available online...<br>",
                    "See our web site for details.</HTML>"},
            {"wait-left", "15"},
            {"wait-top", "15"},
            {"wait-color", "black"},
            {"wait-font-name", "SANS"},
            {"wait-font-size", "16"},
            {"wait-font-style", "BOLD"},
            {"wait-alignment", "LEFT"}};

    /**
     * Construct a new {@code DefaultFeedbackPanelSkin} properties object.
     */
    DefaultFeedbackPanelSkin() {

        super();

        for (final String[] content : CONTENTS) {
            setProperty(content[0], content[1]);
        }
    }
}
