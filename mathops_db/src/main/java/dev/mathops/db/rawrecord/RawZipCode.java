package dev.mathops.db.rawrecord;

import dev.mathops.core.EqualityTests;
import dev.mathops.core.builder.HtmlBuilder;
import dev.mathops.db.rec.RecBase;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Objects;

/**
 * An immutable record of a zip code.
 */
public final class RawZipCode extends RecBase implements Comparable<RawZipCode> {

    /** A field name. */
    private static final String FLD_ZIP_CODE = "zip_code";

    /** A field name. */
    private static final String FLD_CITY = "city";

    /** A field name. */
    private static final String FLD_STATE = "state";

    /** The 'zip_code' field value. */
    public String zipCode;

    /** The 'city' field value. */
    public String city;

    /** The 'state' field value. */
    public String state;

    /**
     * Constructs a new {@code RawZipCode}.
     */
    private RawZipCode() {

        super();
    }

    /**
     * Constructs a new {@code RawZipCode} by parsing the string format generated by {@code serializedString}.
     *
     * @param toParse the string to parse
     * @return the parsed object
     * @throws IllegalArgumentException if the string cannot be parsed
     */
    public static RawZipCode parse(final String toParse) {

        final RawZipCode result = new RawZipCode();

        result.parseString(toParse);

        return result;
    }

    /**
     * Sets a field based on its name and the string representation of its value.
     *
     * <p>
     * If the field name is not recognized, no action is taken (perhaps the object is being deserialized from an old
     * record created at a time when a field was present that has since been removed).
     *
     * <p>
     * An {@code IllegalArgumentException} is thrown if a field name is recognized but the value provided cannot be
     * interpreted or if the field name or value string is {@code null}.
     *
     * @param name  the field name
     * @param value the value
     * @throws IllegalArgumentException if the string cannot be parsed
     */
    @Override
    protected void setField(final String name, final String value) throws IllegalArgumentException {

        if (FLD_ZIP_CODE.equals(name)) {
            this.zipCode = value;
        } else if (FLD_CITY.equals(name)) {
            this.city = value;
        } else if (FLD_STATE.equals(name)) {
            this.state = value;
        }
    }

    /**
     * Constructs a new {@code RawZipCode}.
     *
     * @param theZipCode the zip code
     * @param theCity    the city
     * @param theState   the state
     */
    public RawZipCode(final String theZipCode, final String theCity, final String theState) {

        super();

        this.zipCode = theZipCode;
        this.city = theCity;
        this.state = theState;
    }

    /**
     * Extracts a "which_db" record from a result set.
     *
     * @param rs the result set from which to retrieve the record
     * @return the record
     * @throws SQLException if there is an error accessing the database
     */
    public static RawZipCode fromResultSet(final ResultSet rs) throws SQLException {

        final RawZipCode result = new RawZipCode();

        result.zipCode = getStringField(rs, FLD_ZIP_CODE);
        result.city = getStringField(rs, FLD_CITY);
        result.state = getStringField(rs, FLD_STATE);

        return result;
    }

    /**
     * Compares two records for order.
     *
     * @param o the object to which to compare
     * @return a negative value, 0, or a positive value as this object is less than, equal to, or greater than
     *         {@code o}.
     */
    @Override
    public int compareTo(final RawZipCode o) {

        return compareAllowingNull(this.zipCode, o.zipCode);
    }

    /**
     * Generates a string serialization of the record. Each concrete subclass should have a constructor that accepts a
     * single {@code String} to reconstruct the object from this string.
     *
     * @return the string
     */
    @Override
    public String serializedString() {

        final HtmlBuilder htm = new HtmlBuilder(40);

        appendField(htm, FLD_ZIP_CODE, this.zipCode);
        htm.add(DIVIDER);
        appendField(htm, FLD_CITY, this.city);
        htm.add(DIVIDER);
        appendField(htm, FLD_STATE, this.state);

        return htm.toString();
    }

    /**
     * Generates a hash code for the object.
     *
     * @return the hash code
     */
    @Override
    public int hashCode() {

        return EqualityTests.objectHashCode(this.zipCode)
                + EqualityTests.objectHashCode(this.city)
                + EqualityTests.objectHashCode(this.state);
    }

    /**
     * Tests whether this object is equal to another.
     *
     * @param obj the other object
     * @return true if equal; false if not
     */
    @Override
    public boolean equals(final Object obj) {

        final boolean equal;

        if (obj == this) {
            equal = true;
        } else if (obj instanceof final RawZipCode rec) {
            equal = Objects.equals(this.zipCode, rec.zipCode)
                    && Objects.equals(this.city, rec.city)
                    && Objects.equals(this.state, rec.state);
        } else {
            equal = false;
        }

        return equal;
    }
}
