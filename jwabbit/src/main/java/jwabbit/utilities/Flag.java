package jwabbit.utilities;

/*
 * This software was derived from the Wabbitemu software, as it existed in October 2015, by Steve Benoit. This software
 * is licensed under the GNU General Public License version 2 (GPLv2). See the disclaimers or warranty and liability
 * included in the terms of that license.
 */

/**
 * WABBITEMU SOURCE: utilities/flags.h, "flag_t" struct.
 */
public final class Flag {

    /** WABBITEMU SOURCE: utilities/flags.h, "flags83p" array. */
    private static final Flag[] FLAGS_83P = {
            new Flag("trigFlags", 0x00,
                    new Bit[]{new Bit("", -1),
                            new Bit("", -1),
                            new Bit("trigDeg", 2),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),}),
            new Flag("kbdFlags", 0x00,
                    new Bit[]{new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("kbdSCR", 3),
                            new Bit("kbdKeyPress", 4),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),}),
            new Flag("doneFlags", 0x00,
                    new Bit[]{new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("donePrgm", 5),
                            new Bit("", -1),
                            new Bit("", -1),}),
            new Flag("ioDelFlag", 0x00,
                    new Bit[]{new Bit("inDelete", 0),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),}),
            new Flag("editFlags", 0x01,
                    new Bit[]{new Bit("", -1),
                            new Bit("", -1),
                            new Bit("editOpen", 2),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),}),
            new Flag("monFlags", 0x01,
                    new Bit[]{new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("monAbandon", 4),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),}),
            new Flag("plotFlags", 0x02,
                    new Bit[]{new Bit("", -1),
                            new Bit("plotLoc", 1),
                            new Bit("plotDisp", 2),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),}),
            new Flag("grfModeFlags", 0x02,
                    new Bit[]{new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("grfFuncM", 4),
                            new Bit("grfPolarM", 5),
                            new Bit("grfParamM", 6),
                            new Bit("grfRecurM", 7),}),
            new Flag("graphFlags", 0x03,
                    new Bit[]{new Bit("graphDraw", 0),
                            new Bit("", -1),
                            new Bit("graphCursor", 2),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),}),
            new Flag("grfDBFlags", 0x04,
                    new Bit[]{new Bit("grfDot", 0),
                            new Bit("grfSimul", 1),
                            new Bit("grfGrid", 2),
                            new Bit("grfPolar", 3),
                            new Bit("grfNoCoord", 4),
                            new Bit("grfNoAxis", 5),
                            new Bit("grfLabel", 6),
                            new Bit("", -1),}),
            new Flag("textFlags", 0x05,
                    new Bit[]{new Bit("", -1),
                            new Bit("textEraseBelow", 1),
                            new Bit("textScrolled", 2),
                            new Bit("textInverse", 3),
                            new Bit("textInsMode", 4),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),}),
            new Flag("ParsFlag2", 0x07,
                    new Bit[]{new Bit("numOP1", 0),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),}),
            new Flag("newDispF", 0x08,
                    new Bit[]{new Bit("preClrForMode", 0),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),}),
            new Flag("apdFlags", 0x08,
                    new Bit[]{new Bit("", -1),
                            new Bit("", -1),
                            new Bit("apdAble", 2),
                            new Bit("apdRunning", 3),
                            new Bit("apdWarmStart", 4),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),}),
            new Flag("onFlags", 0x09,
                    new Bit[]{new Bit("", -1),
                            new Bit("parseInput", 1),
                            new Bit("", -1),
                            new Bit("onRunning", 3),
                            new Bit("onInterrupt", 4),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),}),
            new Flag("statFlags", 0x09,
                    new Bit[]{new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("statsValid", 6),
                            new Bit("statANSDISP", 7),}),
            new Flag("fmtFlags", 0x0A,
                    new Bit[]{new Bit("fmtExponent", 0),
                            new Bit("fmtEng", 1),
                            new Bit("fmtHex", 2),
                            new Bit("fmtOct", 3),
                            new Bit("fmtBin", 4),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),}),
            new Flag("numMode", 0x0A,
                    new Bit[]{new Bit("", -1), new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("fmtReal", 5),
                            new Bit("fmtRect", 6),
                            new Bit("fmtPolar", 7),}),
            new Flag("fmtOverride", 0x0B,
                    new Bit[]{new Bit("", -1), new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),}),
            new Flag("fmtEditFlags", 0x0C,
                    new Bit[]{new Bit("fmtEdit", 0),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),}),
            new Flag("curFlags", 0x0C,
                    new Bit[]{new Bit("", -1),
                            new Bit("", -1),
                            new Bit("curAble", 2),
                            new Bit("curOn", 3),
                            new Bit("curLock", 4),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),}),
            new Flag("appFlags", 0x0D,
                    new Bit[]{new Bit("appWantIntrpt", 0),
                            new Bit("appTextSave", 1),
                            new Bit("appAutoScroll", 2),
                            new Bit("appMenus", 3),
                            new Bit("appLockMenus", 4),
                            new Bit("appCurGraphic", 5),
                            new Bit("appCurWord", 6),
                            new Bit("appExit", 7),}),
            new Flag("rclFlag", 14,
                    new Bit[]{new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("enableQueue", 7),}),
            new Flag("seqFlags", 0x0F,
                    new Bit[]{new Bit("webMode", 0),
                            new Bit("webVert", 1),
                            new Bit("sequv", 2),
                            new Bit("seqvw", 3),
                            new Bit("sequw", 4),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),}),
            new Flag("promptFlags", 0x11,
                    new Bit[]{new Bit("promptEdit", 0),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),}),
            new Flag("indicFlags", 0x12,
                    new Bit[]{new Bit("indicRun", 0),
                            new Bit("indicInUse", 1),
                            new Bit("indicOnly", 2),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),}),
            new Flag("shiftFlags", 0x12,
                    new Bit[]{new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("shift2nd", 3),
                            new Bit("shiftAlpha", 4),
                            new Bit("shiftLwrAlph", 5),
                            new Bit("shiftALock", 6),
                            new Bit("shiftKeepAlph", 7),}),
            new Flag("tblFlags", 0x13,
                    new Bit[]{new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("autoFill", 4),
                            new Bit("autoCalc", 5),
                            new Bit("reTable", 6),
                            new Bit("", -1),}),
            new Flag("sGrFlags", 0x14,
                    new Bit[]{new Bit("grfSplit", 0),
                            new Bit("vertSplit", 1),
                            new Bit("grfSChanged", 2),
                            new Bit("grfSplitOverride", 3),
                            new Bit("write_on_graph", 4),
                            new Bit("g_style_active", 5),
                            new Bit("cmp_mod_box", 6),
                            new Bit("textWrite", 7),}),
            new Flag("newIndicFlags", 0x15,
                    new Bit[]{new Bit("extraIndic", 0),
                            new Bit("saIndic", 1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),}),
            new Flag("newFlags2", 0x16,
                    new Bit[]{new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("noRestores", 5),
                            new Bit("", -1),
                            new Bit("", -1),}),
            new Flag("interruptFlags", 0x16,
                    new Bit[]{new Bit("secondTimerEnabled", 0),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),}),
            new Flag("batteryFlags", 0x16,
                    new Bit[]{new Bit("", -1),
                            new Bit("", -1),
                            new Bit("batteriesGood", 2),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),}),
            new Flag("smartFlags", 0x17,
                    new Bit[]{new Bit("smartGraph", 0),
                            new Bit("smartGraph_inv", 1),
                            new Bit("", -1),
                            new Bit("smarter_mask", 3),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),}),
            new Flag("statFlags2", 0x1A,
                    new Bit[]{new Bit("statDiagnosticsOn", 0),
                            new Bit("", -1),
                            new Bit("No_Del_Stat", 2),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),}),
            new Flag("linkFlags", 0x1B,
                    new Bit[]{new Bit("", -1),
                            new Bit("IDis95h", 1),
                            new Bit("IDis82h", 2),
                            new Bit("IDis83h", 3),
                            new Bit("IDis03h", 4),
                            new Bit("USBenabled", 5),
                            new Bit("", -1),
                            new Bit("", -1),}),
            new Flag("asm_Flag1", 0x21,
                    new Bit[]{new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),}),
            new Flag("asm_Flag2", 0x22,
                    new Bit[]{new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),}),
            new Flag("asm_Flag3", 0x23,
                    new Bit[]{new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),}),
            new Flag("getSendFlg", 0x24,
                    new Bit[]{new Bit("", -1),
                            new Bit("comFailed", 1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),}),
            new Flag("selfTestFlg", 0x24,
                    new Bit[]{new Bit("", -1),
                            new Bit("", -1),
                            new Bit("resetOnPowerOn", 2),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),}),
            new Flag("appLwrCaseFlag", 0x24,
                    new Bit[]{new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("lwrCaseActive", 3),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),}),
            new Flag("contextFlags", 0x25,
                    new Bit[]{new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("nocxPutAway", 5),
                            new Bit("", -1),
                            new Bit("", -1),}),
            new Flag("groupFlags", 0x26,
                    new Bit[]{new Bit("", -1),
                            new Bit("inGroup", 1),
                            new Bit("noCompletionByte", 2),
                            new Bit("noDataWrite", 3),
                            new Bit("", -1),
                            new Bit("writeSizeBytesOnly", 5),
                            new Bit("", -1),
                            new Bit("", -1),}),
            new Flag("apiFlag", 0x28,
                    new Bit[]{new Bit("AppAllowContext", 0),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("appRunning", 4),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("appRetOffKey", 7),}),
            new Flag("apiFlg2", 0x29,
                    new Bit[]{new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),}),
            new Flag("apiFlg3", 0x2A,
                    new Bit[]{new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),}),
            new Flag("apiFlg4", 0x2B,
                    new Bit[]{new Bit("", -1),
                            new Bit("cellOverride", 1),
                            new Bit("fullScrnDraw", 2),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),}),
            new Flag("xapFlag0", 0x2E,
                    new Bit[]{new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),}),
            new Flag("xapFlag1", 0x2F,
                    new Bit[]{new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),}),
            new Flag("xapFlag2", 0x30,
                    new Bit[]{new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),}),
            new Flag("xapFlag3", 0x31,
                    new Bit[]{new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),}),
            new Flag("fontFlags", 0x32,
                    new Bit[]{new Bit("", -1),
                            new Bit("", -1),
                            new Bit("fracDrawLFont", 2),
                            new Bit("fracTallLFont", 3),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("customFont", 7),}),
            new Flag("scriptFlag", 0x33,
                    new Bit[]{new Bit("alt_On", 0),
                            new Bit("alt_Off", 1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),}),
            new Flag("rclFlag2", 0x33,
                    new Bit[]{new Bit("", -1),
                            new Bit("", -1),
                            new Bit("useRclQueueEnd", 2),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),}),
            new Flag("hookflags1", 0x33,
                    new Bit[]{new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("ignoreBPLink", 3),
                            new Bit("bPLinkOn", 4),
                            new Bit("enableKeyEcho", 5),
                            new Bit("noTempDelete", 6),
                            new Bit("", -1),}),
            new Flag("sysHookFlg", 0x34,
                    new Bit[]{new Bit("getCSCHookActive", 0),
                            new Bit("libraryHookActive", 1),
                            new Bit("", -1), new Bit("", -1),
                            new Bit("homescreenHookActive", 4),
                            new Bit("rawKeyHookActive", 5),
                            new Bit("catalog2HookActive", 6),
                            new Bit("cursorHookActive", 7),}),
            new Flag("sysHookFlg1", 0x35,
                    new Bit[]{new Bit("tokenHookActive", 0),
                            new Bit("localizeHookActive", 1),
                            new Bit("windowHookActive", 2),
                            new Bit("graphHookActive", 3),
                            new Bit("yEquHookActive", 4),
                            new Bit("fontHookActive", 5),
                            new Bit("regraphHookActive", 6),
                            new Bit("drawingHookActive", 7),}),
            new Flag("sysHookFlag2", 0x36,
                    new Bit[]{new Bit("traceHookActive", 0),
                            new Bit("parserHookActive", 1),
                            new Bit("appChangeHookActive", 2),
                            new Bit("catalog1HookActive", 3),
                            new Bit("helpHookActive", 4),
                            new Bit("cxRedispHookActive", 5),
                            new Bit("menuHookActive", 6),
                            new Bit("silentLinkHookActive", 7),}),
            new Flag("plotFlag3", 0x3C,
                    new Bit[]{new Bit("bufferOnly", 0),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("useFastCirc", 4),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),}),
            new Flag("dBKeyFlags", 0x3D,
                    new Bit[]{new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("keyDefaultsF", 6),
                            new Bit("", -1),}),
            new Flag("silentLinkFlags", 0x3E,
                    new Bit[]{new Bit("silentLinkActive", 0),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),}),
            new Flag("extraHookFlags", 0x3E,
                    new Bit[]{new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("checkCatalog2HookVer", 3),
                            new Bit("openLibActive", 4),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),}),
            new Flag("clockFlags", 0x3F,
                    new Bit[]{new Bit("notMDYMode", 0),
                            new Bit("isYMDMode", 1),
                            new Bit("is24Hour", 2),
                            new Bit("inAfternoon", 3),
                            new Bit("useTokensInString", 4),
                            new Bit("displayClock", 5),
                            new Bit("clockOn", 6),
                            new Bit("", -1),}),
            new Flag("USBFlag1", 0x40,
                    new Bit[]{new Bit("", -1),
                            new Bit("", -1),
                            new Bit("usbReceiveZone1", 2),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),}),
            new Flag("USBFlag2", 0x41,
                    new Bit[]{new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("noUSBHostInit", 3),
                            new Bit("", -1),
                            new Bit("usbDataWaiting", 5),
                            new Bit("", -1),
                            new Bit("", -1),}),
            new Flag("USBFlag3", 0x42,
                    new Bit[]{new Bit("usbTimeoutError", 0),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),}),
            new Flag("", -1,
                    new Bit[]{new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),
                            new Bit("", -1),}),};

    /** The name. */
    private final String name;

    /** The flag number. */
    private final int flag;

    /** The bits within the flag. */
    private final Bit[] bits;

    /**
     * Constructs a new {@code Flag}.
     *
     * @param theName the name
     * @param theFlag the flag number
     * @param theBits the bits array
     */
    private Flag(final String theName, final int theFlag, final Bit[] theBits) {

        super();

        this.name = theName;
        this.flag = theFlag;
        this.bits = theBits.clone();
    }

    /**
     * Gets the name.
     *
     * @return the name
     */
    public String getName() {

        return this.name;
    }

    /**
     * Gets the flag.
     *
     * @return the flag
     */
    public int getFlag() {

        return this.flag;
    }

    /**
     * WABBITEMU SOURCE: utilities/label.c, "*FindFlags" function.
     *
     * @param flag       the flag number
     * @param bit        the bit number
     * @param flagstring an array into which to place the name of the found flag
     * @param bitstring  an array into which to place the name of the found bit
     */
    public static void findFlags(final int flag, final int bit, final String[] flagstring, final String[] bitstring) {

        for (int i = 0; FLAGS_83P[i].flag != -1; ++i) {
            if (FLAGS_83P[i].flag == flag) {
                for (int b = 0; b < 8; ++b) {
                    if (FLAGS_83P[i].bits[b].getBit() == bit) {
                        flagstring[0] = FLAGS_83P[i].name;
                        bitstring[0] = FLAGS_83P[i].bits[b].getName();
                        return;
                    }
                }
            }
        }

        flagstring[0] = null;
        bitstring[0] = null;
    }

    /**
     * WABBITEMU SOURCE: utilities/flags.h, "bits_t" struct.
     */
    static final class Bit {

        /** The name of the bit. */
        private final String name;

        /** The bit. */
        private final int bit;

        /**
         * Constructs a new {@code Bit}.
         *
         * @param theName the name
         * @param theBit  the bit
         */
        Bit(final String theName, final int theBit) {

            this.name = theName;
            this.bit = theBit;
        }

        /**
         * Gets the name.
         *
         * @return the name
         */
        String getName() {

            return this.name;
        }

        /**
         * Gets the bit.
         *
         * @return the bit
         */
        int getBit() {

            return this.bit;
        }
    }
}
