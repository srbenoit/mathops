package dev.mathops.app.teststation;

import dev.mathops.app.AbstractInternalDialogBase;
import dev.mathops.core.CoreConstants;
import dev.mathops.core.log.Log;

import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.SwingUtilities;
import java.awt.event.ActionListener;
import java.io.Serial;
import java.util.Properties;

/**
 * A simple dialog to ask the user to confirm that they are finished with the exam. If any questions were left
 * unanswered, the student is warned that the exam is partially completed.
 */
public final class AreYouFinished extends AbstractInternalDialogBase {

    /** Version number for serialization. */
    @Serial
    private static final long serialVersionUID = 304056715384339117L;

    /**
     * Constructs a new {@code AreYouFinished} dialog. If some problems are uncompleted, the student will be warned and
     * asked to confirm that they want to submit an incomplete exam.
     *
     * @param numProblems  the number of problems on the exam
     * @param numCompleted the number of problems the student completed
     * @param theListener     an optional listener to be notified when the user selects a button
     */
    AreYouFinished(final int numProblems, final int numCompleted, final ActionListener theListener) {

        super(null, null, theListener);

        final Properties res = new DefaultAreYouFinishedSkin();

        setResOwner(this);
        buildUI(res, numProblems, numCompleted);
        pack();
    }

    /**
     * Construct the user interface using a specific set of properties.
     *
     * @param res          the properties settings governing GUI look
     * @param numProblems  the number of problems on the exam
     * @param numCompleted the number of problems the student completed
     */
    private void buildUI(final Properties res, final int numProblems, final int numCompleted) {

        if (!SwingUtilities.isEventDispatchThread()) {
            Log.warning(Res.get(Res.NOT_AWT_THREAD));
        }

        // Set the border for the frame, which may be decorated or undecorated,
        // and set the frame size and background (color or image)
        setupFrame(res);

        // Create all the text labels
        final JLabel line1 = new JLabel();

        if (numCompleted == numProblems) {
            line1.setText("Ready to submit your exam for grading.");
        } else {
            line1.setText("<html>You have only answered " + numCompleted + " of the " + numProblems
                    + "<br> questions on the exam.</html>");
        }

        configureSingleLabel(res, line1, "line1");
        createSingleLabel(res, "line2");

        // Create the buttons
        final JButton yesBtn = new JButton();
        yesBtn.setActionCommand("Yes");
        yesBtn.addActionListener(this);
        configureButton(res, yesBtn, "yes");

        final JButton noBtn = new JButton();
        noBtn.setActionCommand("No");
        noBtn.addActionListener(this);
        configureButton(res, noBtn, "no");
    }

    /**
     * A stub method that subclasses can override to validate a command.
     *
     * @param cmd the command generated by a dialog button press
     * @return {@code true} to accept the command, {@code false} to veto the command
     */
    @Override
    public boolean validateAction(final String cmd) {

        return true;
    }
}

/**
 * A resource bundle class that contains the default settings for the panel.
 */
final class DefaultAreYouFinishedSkin extends Properties {

    /** Version number for serialization. */
    @Serial
    private static final long serialVersionUID = 4850621921439358182L;

    /** The default settings. */
    private static final String[][] CONTENTS = {
            {"panel-title", "Submit Exam for Grading"},
            {"panel-width", "400"},
            {"panel-height", "170"},
            {"panel-border-style", "line"},
            {"panel-border-size", "1"},
            {"panel-border-color", "black"},
            {"panel-background-color", "gray80"},

            {"line1-text", CoreConstants.EMPTY},
            {"line1-left", "15"},
            {"line1-top", "15"},
            {"line1-color", "black"},
            {"line1-font-name", "SANS"},
            {"line1-font-size", "16"},
            {"line1-font-style", "BOLD"},
            {"line1-alignment", "LEFT"},

            {"line2-text", "Are you sure you are finished?"},
            {"line2-left", "15"},
            {"line2-top", "75"},
            {"line2-color", "black"},
            {"line2-font-name", "SANS"},
            {"line2-font-size", "16"},
            {"line2-font-style", "BOLD"},
            {"line2-alignment", "LEFT"},

            {"yes-text", "Yes"},
            {"yes-top", "125"},
            {"yes-left", "100"},
            {"yes-width", "75"},
            {"yes-foreground", "black"},
            {"yes-background", "gray70"},
            {"yes-font-name", "SANS"},
            {"yes-font-size", "15"},
            {"yes-font-style", "PLAIN"},
            {"yes-border", "true"},

            {"no-text", "No"},
            {"no-top", "125"},
            {"no-left", "225"},
            {"no-width", "75"},
            {"no-foreground", "black"},
            {"no-background", "gray70"},
            {"no-font-name", "SANS"},
            {"no-font-size", "15"},
            {"no-font-style", "PLAIN"},
            {"no-border", "true"}};

    /**
     * Constructs a new {@code DefaultAreYouFinishedSkin} properties object.
     */
    DefaultAreYouFinishedSkin() {

        super();

        for (final String[] content : CONTENTS) {
            setProperty(content[0], content[1]);
        }
    }
}
