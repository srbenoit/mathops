package dev.mathops.db.old.rawrecord;

import dev.mathops.commons.EqualityTests;
import dev.mathops.commons.builder.HtmlBuilder;
import dev.mathops.db.old.rec.RecBase;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.chrono.ChronoLocalDate;
import java.util.Comparator;
import java.util.Objects;

/**
 * A raw "special_stus" record.
 */
public final class RawSpecialStus extends RecBase implements Comparable<RawSpecialStus> {

    /** A field name. */
    private static final String FLD_STU_ID = "stu_id";

    /** A field name. */
    private static final String FLD_STU_TYPE = "stu_type";

    /** A field name. */
    private static final String FLD_START_DT = "start_dt";

    /** A field name. */
    private static final String FLD_END_DT = "end_dt";

    /** The 'stu_id' field value. */
    public String stuId;

    /** The 'stu_type' field value. */
    public String stuType;

    /** The 'start_dt' field value. */
    public LocalDate startDt;

    /** The 'end_dt' field value. */
    public LocalDate endDt;

    /**
     * Constructs a new {@code RawSpecialStus}.
     */
    private RawSpecialStus() {

        super();
    }

    /**
     * Constructs a new {@code RawSpecialStus} by parsing the string format generated by {@code serializedString}.
     *
     * @param toParse the string to parse
     * @return the parsed object
     * @throws IllegalArgumentException if the string cannot be parsed
     */
    public static RawSpecialStus parse(final String toParse) {

        final RawSpecialStus result = new RawSpecialStus();

        result.parseString(toParse);

        return result;
    }

    /**
     * Sets a field based on its name and the string representation of its value.
     *
     * <p>
     * If the field name is not recognized, no action is taken (perhaps the object is being deserialized from an old
     * record created at a time when a field was present that has since been removed).
     *
     * <p>
     * An {@code IllegalArgumentException} is thrown if a field name is recognized but the value provided cannot be
     * interpreted or if the field name or value string is {@code null}.
     *
     * @param name  the field name
     * @param value the value
     * @throws IllegalArgumentException if the string cannot be parsed
     */
    @Override
    protected void setField(final String name, final String value) throws IllegalArgumentException {

        if (FLD_STU_ID.equals(name)) {
            this.stuId = value;
        } else if (FLD_STU_TYPE.equals(name)) {
            this.stuType = value;
        } else if (FLD_START_DT.equals(name)) {
            this.startDt = LocalDate.parse(value);
        } else if (FLD_END_DT.equals(name)) {
            this.endDt = LocalDate.parse(value);
        }
    }

    /**
     * Constructs a new {@code RawSpecialStus}.
     *
     * @param theStuId   the student ID
     * @param theStuType the student type
     * @param theStartDt the start date
     * @param theEndDt   the end date
     */
    public RawSpecialStus(final String theStuId, final String theStuType,
                          final LocalDate theStartDt, final LocalDate theEndDt) {

        super();

        this.stuId = theStuId;
        this.stuType = theStuType;
        this.startDt = theStartDt;
        this.endDt = theEndDt;
    }

    /**
     * Tests whether this record is active as of a given date.
     *
     * @param today the date
     * @return true if the record is active on the specified date
     */
    public boolean isActive(final ChronoLocalDate today) {

        boolean active = this.startDt == null || !this.startDt.isAfter(today);

        if (this.endDt != null && this.endDt.isBefore(today)) {
            active = false;
        }

        return active;
    }

    /**
     * Extracts an "special_stus" record from a result set.
     *
     * @param rs the result set from which to retrieve the record
     * @return the record
     * @throws SQLException if there is an error accessing the database
     */
    public static RawSpecialStus fromResultSet(final ResultSet rs) throws SQLException {

        final RawSpecialStus result = new RawSpecialStus();

        result.stuId = getStringField(rs, FLD_STU_ID);
        result.stuType = getStringField(rs, FLD_STU_TYPE);
        result.startDt = getDateField(rs, FLD_START_DT);
        result.endDt = getDateField(rs, FLD_END_DT);

        return result;
    }

    /**
     * Compares two records for order.
     *
     * @param o the object to be compared
     * @return a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than
     *         the specified object
     */
    @Override
    public int compareTo(final RawSpecialStus o) {

        int result = this.stuId.compareTo(o.stuId);

        if (result == 0) {
            result = this.stuType.compareTo(o.stuType);
        }

        return result;
    }

    /**
     * A comparator that can be used to sort a list of {@code RawSpecialStus} by start date.
     */
    public static final class StartDateComparator implements Comparator<RawSpecialStus> {

        /**
         * Perform the comparison.
         */
        @Override
        public int compare(final RawSpecialStus o1, final RawSpecialStus o2) {

            int result = compareAllowingNull(o1.startDt, o2.startDt);
            if (result == 0) {
                result = compareAllowingNull(o1.stuId, o2.stuId);
                if (result == 0) {
                    result = compareAllowingNull(o1.stuType, o2.stuType);
                }
            }

            return result;
        }
    }

    /**
     * A comparator that can be used to sort a list of {@code RawSpecialStus} by end date.
     */
    public static final class EndDateComparator implements Comparator<RawSpecialStus> {

        /**
         * Perform the comparison.
         */
        @Override
        public int compare(final RawSpecialStus o1, final RawSpecialStus o2) {

            int result = compareAllowingNull(o1.endDt, o2.endDt);
            if (result == 0) {
                result = compareAllowingNull(o1.stuId, o2.stuId);
                if (result == 0) {
                    result = compareAllowingNull(o1.stuType, o2.stuType);
                }
            }

            return result;
        }
    }

    /**
     * Generates a string serialization of the record. Each concrete subclass should have a constructor that accepts a
     * single {@code String} to reconstruct the object from this string.
     *
     * @return the string
     */
    @Override
    public String serializedString() {

        final HtmlBuilder htm = new HtmlBuilder(40);

        appendField(htm, FLD_STU_ID, this.stuId);
        htm.add(DIVIDER);
        appendField(htm, FLD_STU_TYPE, this.stuType);
        htm.add(DIVIDER);
        appendField(htm, FLD_START_DT, this.startDt);
        htm.add(DIVIDER);
        appendField(htm, FLD_END_DT, this.endDt);

        return htm.toString();
    }

    /**
     * Generates a hash code for the object.
     *
     * @return the hash code
     */
    @Override
    public int hashCode() {

        return Objects.hashCode(this.stuId)
                + Objects.hashCode(this.stuType)
                + Objects.hashCode(this.startDt)
                + Objects.hashCode(this.endDt);
    }

    /**
     * Tests whether this object is equal to another.
     *
     * @param obj the other object
     * @return true if equal; false if not
     */
    @Override
    public boolean equals(final Object obj) {

        final boolean equal;

        if (obj == this) {
            equal = true;
        } else if (obj instanceof final RawSpecialStus rec) {
            equal = Objects.equals(this.stuId, rec.stuId)
                    && Objects.equals(this.stuType, rec.stuType)
                    && Objects.equals(this.startDt, rec.startDt)
                    && Objects.equals(this.endDt, rec.endDt);
        } else {
            equal = false;
        }

        return equal;
    }
}
