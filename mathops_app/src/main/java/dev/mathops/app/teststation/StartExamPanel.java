package dev.mathops.app.teststation;

import dev.mathops.commons.CoreConstants;
import dev.mathops.commons.log.Log;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JDesktopPane;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JProgressBar;
import javax.swing.SwingUtilities;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.Serial;

/**
 * A dialog that waits for a student to arrive at their seat to start an exam.
 */
public class StartExamPanel extends JInternalFrame implements ActionListener {

    /** Version number for serialization. */
    @Serial
    private static final long serialVersionUID = 6838464786206470421L;

    /** The correct student ID. */
    private final String studentId;

    /** True if validation was successful. */
    private boolean succeeded;

    /** Counter for the number of attempts made. */
    private int attempt;

    /** The field used to enter the student ID. */
    private JPasswordField idField;

    /** A bar to display a login timeout. */
    private JProgressBar timeout;

    /**
     * Constructs a new {@code StartExamPanel} panel.
     *
     * @param desk         the desktop pane that will contain the dialog
     * @param theStudentId the correct student ID, to be validated
     * @param baseColor    the color of the background screen this panel lives on
     */
    public StartExamPanel(final JDesktopPane desk, final String theStudentId,
                          final Color baseColor) {

        super("Student ID Verification", false, false, false, false);

        this.studentId = theStudentId;

        final StartExamPanelGuiBuilder builder = new StartExamPanelGuiBuilder(desk, this, baseColor);

        try {
            SwingUtilities.invokeAndWait(builder);
            this.idField = builder.getUserIdField();
            this.timeout = builder.getProgress();
        } catch (final Exception e) {
            Log.warning(e);
        }
    }

    /**
     * Tests whether the student ID has been verified.
     *
     * @return {@code true} if ID was verified, {@code false} otherwise
     */
    public boolean succeeded() {

        return this.succeeded;
    }

    /**
     * Gets the progress bar that will show timeout.
     *
     * @return the timeout progress bar
     */
    JProgressBar getProgressBar() {

        return this.timeout;
    }

    /**
     * Tries to set the input focus to the input field.
     */
    void focusInput() {

        this.idField.requestFocus();
        this.idField.requestFocusInWindow();
    }

    /**
     * Handles button presses on the OK button.
     *
     * @param e the action event generated by the button press
     */
    @Override
    public void actionPerformed(final ActionEvent e) {

        if (!SwingUtilities.isEventDispatchThread()) {
            Log.warning(Res.get(Res.NOT_AWT_THREAD));
        }

        final String id = String.valueOf(this.idField.getPassword());

        // Allow extra characters entered at the end, since student ID cards have extra
        if (id.startsWith(this.studentId)) {
            this.succeeded = true;
            this.setVisible(false);
            dispose();
        } else {
            this.idField.setBackground(new Color(255, 220, 200));
            this.idField.setText(CoreConstants.EMPTY);

            ++this.attempt;

            if (this.attempt == 5) {
                this.succeeded = false;
                this.setVisible(false);
                dispose();
            }
        }
    }
}

/**
 * A runnable that is to be called in the AWT event dispatcher thread to construct the dialog's GUI.
 */
class StartExamPanelGuiBuilder implements Runnable {

    /** The pane in which to center the dialog. */
    private JDesktopPane deskPane;

    /** The panel whose GUI is to be built. */
    private StartExamPanel panel;

    /** The background color of the underlying window. */
    private Color baseColor;

    /** The user ID field. */
    private JPasswordField userIdField;

    /** The timeout progress bar. */
    private JProgressBar progress;

    /**
     * Constructs a new {@code StartExamPanelGuiBuilder}.
     *
     * @param desk         the desktop pane in which to center the dialog
     * @param thePanel     the panel whose GUI is to be built
     * @param theBaseColor the background color of the window on which the panel is to sit
     */
    StartExamPanelGuiBuilder(final JDesktopPane desk, final StartExamPanel thePanel,
                             final Color theBaseColor) {

        this.deskPane = desk;
        this.panel = thePanel;
        this.baseColor = theBaseColor;
    }

    /**
     * Gets the desktop pane.
     *
     * @return the desktop pane
     */
    public JDesktopPane getDeskPane() {

        return this.deskPane;
    }

    /**
     * Sets the desktop pane.
     *
     * @param theDeskPane the new desktop pane
     */
    public void setDeskPane(final JDesktopPane theDeskPane) {

        this.deskPane = theDeskPane;
    }

    /**
     * Gets the start exam panel.
     *
     * @return the start exam panel
     */
    public StartExamPanel getPanel() {

        return this.panel;
    }

    /**
     * Sets the start exam panel.
     *
     * @param thePanel the new start exam panel
     */
    public void setPanel(final StartExamPanel thePanel) {

        this.panel = thePanel;
    }

    /**
     * Gets the base color.
     *
     * @return the base color
     */
    public Color getBaseColor() {

        return this.baseColor;
    }

    /**
     * Sets the base color.
     *
     * @param theBaseColor the new base color
     */
    public void setBaseColor(final Color theBaseColor) {

        this.baseColor = theBaseColor;
    }

    /**
     * Gets the user ID field.
     *
     * @return the user ID field
     */
    public JPasswordField getUserIdField() {

        return this.userIdField;
    }

    /**
     * Sets the user ID field.
     *
     * @param theGuiIdField the new user ID field
     */
    public void setGuiIdField(final JPasswordField theGuiIdField) {

        this.userIdField = theGuiIdField;
    }

    /**
     * Gets the progress bar.
     *
     * @return the progress bar
     */
    public JProgressBar getProgress() {

        return this.progress;
    }

    /**
     * Sets the progress bar.
     *
     * @param theProgress the new progress bar
     */
    public void setProgress(final JProgressBar theProgress) {

        this.progress = theProgress;
    }

    /**
     * Constructs the user interface.
     */
    @Override
    public void run() {

        if (!SwingUtilities.isEventDispatchThread()) {
            Log.warning(Res.get(Res.NOT_AWT_THREAD));
        }

        final JPanel content = new JPanel(new BorderLayout());
        this.panel.setContentPane(content);

        final JPanel center = new JPanel();
        center.setBorder(BorderFactory.createEmptyBorder(15, 15, 15, 15));
        center.setLayout(new BorderLayout(10, 10));
        content.add(center, BorderLayout.CENTER);

        // Build the progress bar to show timeouts
        this.progress = new JProgressBar(0, 720);
        this.progress.setString("Login Timeout");
        this.progress.setStringPainted(true);
        content.add(this.progress, BorderLayout.SOUTH);

        // Make this panel a light version of the background color
        int r = this.baseColor.getRed();
        int g = this.baseColor.getGreen();
        int b = this.baseColor.getBlue();
        r = r + ((255 - r) / 2);
        g = g + ((255 - g) / 2);
        b = b + ((255 - b) / 2);

        final Color bg = new Color(r, g, b);
        content.setBackground(bg);
        center.setBackground(bg);

        // Create the title
        final JLabel lbl = new JLabel("Enter your student ID to begin:");
        lbl.setBackground(bg);
        center.add(lbl, BorderLayout.NORTH);

        // Create the entry box
        final JPanel inner = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 10));
        inner.setBackground(bg);
        this.userIdField = new JPasswordField(10);
        inner.add(this.userIdField);
        center.add(inner, BorderLayout.CENTER);

        // Create the OK button
        final JPanel inner2 = new JPanel(new GridLayout(1, 3, 10, 10));
        inner2.setBackground(bg);
        inner2.add(new JLabel(CoreConstants.SPC));

        final JButton btn = new JButton("OK");
        btn.setBackground(bg);
        btn.addActionListener(this.panel);
        inner2.add(btn);
        inner2.add(new JLabel(CoreConstants.SPC));
        center.add(inner2, BorderLayout.SOUTH);

        this.panel.getRootPane().setDefaultButton(btn);
        this.panel.pack();

        final Dimension screen = this.deskPane.getSize();
        final Dimension size = this.panel.getSize();
        this.panel.setLocation((screen.width - size.width) / 2, (screen.height - size.height) / 2);
    }
}
